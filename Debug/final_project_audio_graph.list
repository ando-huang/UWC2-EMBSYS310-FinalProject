
final_project_audio_graph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000504c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080051d4  080051d4  000061d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005218  08005218  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005218  08005218  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005218  08005218  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005218  08005218  00006218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800521c  0800521c  0000621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005220  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b0c  2000005c  0800527c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  0800527c  00007b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109d8  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002905  00000000  00000000  00017a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d85  00000000  00000000  0001b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fee  00000000  00000000  0001c285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001493d  00000000  00000000  00043273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0d12  00000000  00000000  00057bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001488c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  00148908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080051bc 	.word	0x080051bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	080051bc 	.word	0x080051bc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_DFSDM1_Init>:
DFSDM_Filter_HandleTypeDef hdfsdm1_filter0;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80005e4:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 80005e6:	4a30      	ldr	r2, [pc, #192]	@ (80006a8 <MX_DFSDM1_Init+0xc8>)
 80005e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80005ea:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 80005f0:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 80005f6:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000602:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 8000604:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000608:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 800060c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000610:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 8000612:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 8000614:	2201      	movs	r2, #1
 8000616:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 64;
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 800061a:	2240      	movs	r2, #64	@ 0x40
 800061c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800061e:	4821      	ldr	r0, [pc, #132]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 8000620:	f001 f840 	bl	80016a4 <HAL_DFSDM_FilterInit>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_DFSDM1_Init+0x4e>
  {
    Error_Handler();
 800062a:	f000 fbb9 	bl	8000da0 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 800062e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000630:	4a1f      	ldr	r2, [pc, #124]	@ (80006b0 <MX_DFSDM1_Init+0xd0>)
 8000632:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000634:	4b1d      	ldr	r3, [pc, #116]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000636:	2200      	movs	r2, #0
 8000638:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000642:	2202      	movs	r2, #2
 8000644:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 800066c:	2201      	movs	r2, #1
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <MX_DFSDM1_Init+0xcc>)
 800067e:	f000 ff51 	bl	8001524 <HAL_DFSDM_ChannelInit>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_DFSDM1_Init+0xac>
  {
    Error_Handler();
 8000688:	f000 fb8a 	bl	8000da0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0) != HAL_OK)
 800068c:	2101      	movs	r1, #1
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_DFSDM1_Init+0xc4>)
 8000690:	f001 f8e2 	bl	8001858 <HAL_DFSDM_FilterConfigInjChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_DFSDM1_Init+0xbe>
  {
    Error_Handler();
 800069a:	f000 fb81 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000078 	.word	0x20000078
 80006a8:	40016100 	.word	0x40016100
 80006ac:	200000cc 	.word	0x200000cc
 80006b0:	40016000 	.word	0x40016000

080006b4 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0ac      	sub	sp, #176	@ 0xb0
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2288      	movs	r2, #136	@ 0x88
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f004 fb9f 	bl	8004e18 <memset>
  if(DFSDM1_Init == 0)
 80006da:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <HAL_DFSDM_FilterMspInit+0xd0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d14b      	bne.n	800077a <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80006e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 80006e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80006ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fc49 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <HAL_DFSDM_FilterMspInit+0x50>
    {
      Error_Handler();
 8000700:	f000 fb4e 	bl	8000da0 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <HAL_DFSDM_FilterMspInit+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a1f      	ldr	r2, [pc, #124]	@ (8000788 <HAL_DFSDM_FilterMspInit+0xd4>)
 800070c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <HAL_DFSDM_FilterMspInit+0xd4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d10b      	bne.n	800072e <HAL_DFSDM_FilterMspInit+0x7a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <HAL_DFSDM_FilterMspInit+0xd8>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071a:	4a1c      	ldr	r2, [pc, #112]	@ (800078c <HAL_DFSDM_FilterMspInit+0xd8>)
 800071c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000720:	6613      	str	r3, [r2, #96]	@ 0x60
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <HAL_DFSDM_FilterMspInit+0xd8>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <HAL_DFSDM_FilterMspInit+0xd8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	4a16      	ldr	r2, [pc, #88]	@ (800078c <HAL_DFSDM_FilterMspInit+0xd8>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <HAL_DFSDM_FilterMspInit+0xd8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PB2     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000746:	2306      	movs	r3, #6
 8000748:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074c:	2302      	movs	r3, #2
 800074e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800075e:	2306      	movs	r3, #6
 8000760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000768:	4619      	mov	r1, r3
 800076a:	4809      	ldr	r0, [pc, #36]	@ (8000790 <HAL_DFSDM_FilterMspInit+0xdc>)
 800076c:	f001 fc20 	bl	8001fb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <HAL_DFSDM_FilterMspInit+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a03      	ldr	r2, [pc, #12]	@ (8000784 <HAL_DFSDM_FilterMspInit+0xd0>)
 8000778:	6013      	str	r3, [r2, #0]
  }
}
 800077a:	bf00      	nop
 800077c:	37b0      	adds	r7, #176	@ 0xb0
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000108 	.word	0x20000108
 8000788:	20000104 	.word	0x20000104
 800078c:	40021000 	.word	0x40021000
 8000790:	48000400 	.word	0x48000400

08000794 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b0ac      	sub	sp, #176	@ 0xb0
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2288      	movs	r2, #136	@ 0x88
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fb2f 	bl	8004e18 <memset>
  if(DFSDM1_Init == 0)
 80007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d14b      	bne.n	800085a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80007c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 80007c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80007cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fbd9 	bl	8002f8c <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <HAL_DFSDM_ChannelMspInit+0x50>
    {
      Error_Handler();
 80007e0:	f000 fade 	bl	8000da0 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80007e4:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000868 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80007ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10b      	bne.n	800080e <HAL_DFSDM_ChannelMspInit+0x7a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80007fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000800:	6613      	str	r3, [r2, #96]	@ 0x60
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	4a16      	ldr	r2, [pc, #88]	@ (800086c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PB2     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000826:	2306      	movs	r3, #6
 8000828:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800083e:	2306      	movs	r3, #6
 8000840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000848:	4619      	mov	r1, r3
 800084a:	4809      	ldr	r0, [pc, #36]	@ (8000870 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800084c:	f001 fbb0 	bl	8001fb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a03      	ldr	r2, [pc, #12]	@ (8000864 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000858:	6013      	str	r3, [r2, #0]
  }
}
 800085a:	bf00      	nop
 800085c:	37b0      	adds	r7, #176	@ 0xb0
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000108 	.word	0x20000108
 8000868:	20000104 	.word	0x20000104
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_DMA_Init+0x38>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087e:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <MX_DMA_Init+0x38>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6493      	str	r3, [r2, #72]	@ 0x48
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_DMA_Init+0x38>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2011      	movs	r0, #17
 8000898:	f000 fe0d 	bl	80014b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800089c:	2011      	movs	r0, #17
 800089e:	f000 fe26 	bl	80014ee <HAL_NVIC_EnableIRQ>

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b29      	ldr	r3, [pc, #164]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a28      	ldr	r2, [pc, #160]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b26      	ldr	r3, [pc, #152]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a22      	ldr	r2, [pc, #136]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b20      	ldr	r3, [pc, #128]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <MX_GPIO_Init+0xbc>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_GPIO_Init+0xbc>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2122      	movs	r1, #34	@ 0x22
 8000912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000916:	f001 fcf5 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000920:	4813      	ldr	r0, [pc, #76]	@ (8000970 <MX_GPIO_Init+0xc0>)
 8000922:	f001 fcef 	bl	8002304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000926:	2322      	movs	r3, #34	@ 0x22
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f001 fb36 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000944:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_GPIO_Init+0xc0>)
 800095e:	f001 fb27 	bl	8001fb0 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3720      	adds	r7, #32
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400

08000974 <TFT_Write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Send data to the display via SPI */
void TFT_Write(uint8_t data)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800097e:	1df9      	adds	r1, r7, #7
 8000980:	f04f 33ff 	mov.w	r3, #4294967295
 8000984:	2201      	movs	r2, #1
 8000986:	4803      	ldr	r0, [pc, #12]	@ (8000994 <TFT_Write+0x20>)
 8000988:	f003 f85f 	bl	8003a4a <HAL_SPI_Transmit>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000910 	.word	0x20000910

08000998 <TFT_SendCommand>:

/* Send a command to the display */
void TFT_SendCommand(uint8_t cmd)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  TFT_DC_LOW();
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009a8:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <TFT_SendCommand+0x40>)
 80009aa:	f001 fcab 	bl	8002304 <HAL_GPIO_WritePin>
  TFT_CS_LOW();
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <TFT_SendCommand+0x40>)
 80009b6:	f001 fca5 	bl	8002304 <HAL_GPIO_WritePin>
  TFT_Write(cmd);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffd9 	bl	8000974 <TFT_Write>
  TFT_CS_HIGH();
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <TFT_SendCommand+0x40>)
 80009ca:	f001 fc9b 	bl	8002304 <HAL_GPIO_WritePin>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	48000400 	.word	0x48000400

080009dc <TFT_SendData>:

/* Send data to the display */
void TFT_SendData(uint8_t data)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  TFT_DC_HIGH();
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ec:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <TFT_SendData+0x40>)
 80009ee:	f001 fc89 	bl	8002304 <HAL_GPIO_WritePin>
  TFT_CS_LOW();
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <TFT_SendData+0x40>)
 80009fa:	f001 fc83 	bl	8002304 <HAL_GPIO_WritePin>
  TFT_Write(data);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffb7 	bl	8000974 <TFT_Write>
  TFT_CS_HIGH();
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <TFT_SendData+0x40>)
 8000a0e:	f001 fc79 	bl	8002304 <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	48000400 	.word	0x48000400

08000a20 <TFT_Clear>:
  TFT_SendData(0xC1);
  TFT_SendData(0x30);
}

void TFT_Clear(uint16_t color)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
  uint16_t x, y;
  for (x = 0; x < 240; x++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	81fb      	strh	r3, [r7, #14]
 8000a2e:	e039      	b.n	8000aa4 <TFT_Clear+0x84>
    for (y = 0; y < 320; y++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	81bb      	strh	r3, [r7, #12]
 8000a34:	e02f      	b.n	8000a96 <TFT_Clear+0x76>
      TFT_SendCommand(0x2A); // Set Column Address
 8000a36:	202a      	movs	r0, #42	@ 0x2a
 8000a38:	f7ff ffae 	bl	8000998 <TFT_SendCommand>
      TFT_SendData(x >> 8);
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ffc9 	bl	80009dc <TFT_SendData>
      TFT_SendData(x & 0xFF);
 8000a4a:	89fb      	ldrh	r3, [r7, #14]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffc4 	bl	80009dc <TFT_SendData>
      TFT_SendCommand(0x2B); // Set Row Address
 8000a54:	202b      	movs	r0, #43	@ 0x2b
 8000a56:	f7ff ff9f 	bl	8000998 <TFT_SendCommand>
      TFT_SendData(y >> 8);
 8000a5a:	89bb      	ldrh	r3, [r7, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ffba 	bl	80009dc <TFT_SendData>
      TFT_SendData(y & 0xFF);
 8000a68:	89bb      	ldrh	r3, [r7, #12]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ffb5 	bl	80009dc <TFT_SendData>
      TFT_SendCommand(0x2C); // Write Memory Start
 8000a72:	202c      	movs	r0, #44	@ 0x2c
 8000a74:	f7ff ff90 	bl	8000998 <TFT_SendCommand>
      TFT_SendData(color >> 8);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	0a1b      	lsrs	r3, r3, #8
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ffab 	bl	80009dc <TFT_SendData>
      TFT_SendData(color & 0xFF);
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffa6 	bl	80009dc <TFT_SendData>
    for (y = 0; y < 320; y++) {
 8000a90:	89bb      	ldrh	r3, [r7, #12]
 8000a92:	3301      	adds	r3, #1
 8000a94:	81bb      	strh	r3, [r7, #12]
 8000a96:	89bb      	ldrh	r3, [r7, #12]
 8000a98:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a9c:	d3cb      	bcc.n	8000a36 <TFT_Clear+0x16>
  for (x = 0; x < 240; x++) {
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	81fb      	strh	r3, [r7, #14]
 8000aa4:	89fb      	ldrh	r3, [r7, #14]
 8000aa6:	2bef      	cmp	r3, #239	@ 0xef
 8000aa8:	d9c2      	bls.n	8000a30 <TFT_Clear+0x10>
    }
  }
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <TFT_DrawGraph>:

void TFT_DrawGraph(float *data, uint16_t size, uint16_t color)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	803b      	strh	r3, [r7, #0]
  uint16_t x, y;
  for (x = 0; x < size; x++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	81fb      	strh	r3, [r7, #14]
 8000ac8:	e041      	b.n	8000b4e <TFT_DrawGraph+0x9a>
    y = 320 - (uint16_t) (data[x] * 10);  // Scale dB data to screen height
 8000aca:	89fb      	ldrh	r3, [r7, #14]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	edd3 7a00 	vldr	s15, [r3]
 8000ad6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae2:	ee17 3a90 	vmov	r3, s15
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000aec:	81bb      	strh	r3, [r7, #12]
    TFT_SendCommand(0x2A); // Set Column Address
 8000aee:	202a      	movs	r0, #42	@ 0x2a
 8000af0:	f7ff ff52 	bl	8000998 <TFT_SendCommand>
    TFT_SendData(x >> 8);
 8000af4:	89fb      	ldrh	r3, [r7, #14]
 8000af6:	0a1b      	lsrs	r3, r3, #8
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff6d 	bl	80009dc <TFT_SendData>
    TFT_SendData(x & 0xFF);
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff68 	bl	80009dc <TFT_SendData>
    TFT_SendCommand(0x2B); // Set Row Address
 8000b0c:	202b      	movs	r0, #43	@ 0x2b
 8000b0e:	f7ff ff43 	bl	8000998 <TFT_SendCommand>
    TFT_SendData(y >> 8);
 8000b12:	89bb      	ldrh	r3, [r7, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff5e 	bl	80009dc <TFT_SendData>
    TFT_SendData(y & 0xFF);
 8000b20:	89bb      	ldrh	r3, [r7, #12]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff59 	bl	80009dc <TFT_SendData>
    TFT_SendCommand(0x2C); // Write Memory Start
 8000b2a:	202c      	movs	r0, #44	@ 0x2c
 8000b2c:	f7ff ff34 	bl	8000998 <TFT_SendCommand>
    TFT_SendData(color >> 8);
 8000b30:	883b      	ldrh	r3, [r7, #0]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff4f 	bl	80009dc <TFT_SendData>
    TFT_SendData(color & 0xFF);
 8000b3e:	883b      	ldrh	r3, [r7, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff4a 	bl	80009dc <TFT_SendData>
  for (x = 0; x < size; x++) {
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	81fb      	strh	r3, [r7, #14]
 8000b4e:	89fa      	ldrh	r2, [r7, #14]
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3b9      	bcc.n	8000aca <TFT_DrawGraph+0x16>
  }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Process_Audio_Data>:

/* Process Audio Data: Converts raw samples into decibels */
void Process_Audio_Data(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  float db_value = Calculate_dB(dfdsdm_buffer, AUDIO_BUFFER_SIZE);
 8000b66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b6a:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <Process_Audio_Data+0x40>)
 8000b6c:	f000 f820 	bl	8000bb0 <Calculate_dB>
 8000b70:	ed87 0a01 	vstr	s0, [r7, #4]

  // Store decibel value into the volume buffer
  static uint16_t index = 0;
  volume_buffer[index++] = db_value;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <Process_Audio_Data+0x44>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	b291      	uxth	r1, r2
 8000b7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ba4 <Process_Audio_Data+0x44>)
 8000b7e:	8011      	strh	r1, [r2, #0]
 8000b80:	4a09      	ldr	r2, [pc, #36]	@ (8000ba8 <Process_Audio_Data+0x48>)
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
  if (index >= AUDIO_BUFFER_SIZE) {
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <Process_Audio_Data+0x44>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	2bff      	cmp	r3, #255	@ 0xff
 8000b90:	d902      	bls.n	8000b98 <Process_Audio_Data+0x38>
    index = 0;  // Wrap around
 8000b92:	4b04      	ldr	r3, [pc, #16]	@ (8000ba4 <Process_Audio_Data+0x44>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	801a      	strh	r2, [r3, #0]
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000010c 	.word	0x2000010c
 8000ba4:	2000090e 	.word	0x2000090e
 8000ba8:	2000050c 	.word	0x2000050c
 8000bac:	00000000 	.word	0x00000000

08000bb0 <Calculate_dB>:

/* Calculate the average volume in decibels */
float Calculate_dB(int32_t *buffer, uint16_t size)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
  float sum_square = 0.0f;
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]

  for (uint16_t i = 0; i < size; i++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	827b      	strh	r3, [r7, #18]
 8000bc6:	e01c      	b.n	8000c02 <Calculate_dB+0x52>
    sum_square += (float) buffer[i] * (float) buffer[i];
 8000bc8:	8a7b      	ldrh	r3, [r7, #18]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	ee07 3a90 	vmov	s15, r3
 8000bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bda:	8a7b      	ldrh	r3, [r7, #18]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	ee07 3a90 	vmov	s15, r3
 8000be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf8:	edc7 7a05 	vstr	s15, [r7, #20]
  for (uint16_t i = 0; i < size; i++) {
 8000bfc:	8a7b      	ldrh	r3, [r7, #18]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	827b      	strh	r3, [r7, #18]
 8000c02:	8a7a      	ldrh	r2, [r7, #18]
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3de      	bcc.n	8000bc8 <Calculate_dB+0x18>
  }

  float rms = sqrtf(sum_square / size);
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c14:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c18:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c1c:	eeb0 0a66 	vmov.f32	s0, s13
 8000c20:	f004 f95a 	bl	8004ed8 <sqrtf>
 8000c24:	ed87 0a03 	vstr	s0, [r7, #12]
  float db = 20.0f * log10f(rms + 1e-5); // Add small value to avoid log(0)
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff fc31 	bl	8000490 <__aeabi_f2d>
 8000c2e:	a310      	add	r3, pc, #64	@ (adr r3, 8000c70 <Calculate_dB+0xc0>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	f7ff face 	bl	80001d4 <__adddf3>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f7ff fc7e 	bl	8000540 <__aeabi_d2f>
 8000c44:	4603      	mov	r3, r0
 8000c46:	ee00 3a10 	vmov	s0, r3
 8000c4a:	f004 f917 	bl	8004e7c <log10f>
 8000c4e:	eef0 7a40 	vmov.f32	s15, s0
 8000c52:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5a:	edc7 7a02 	vstr	s15, [r7, #8]
  return db;
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	ee07 3a90 	vmov	s15, r3
}
 8000c64:	eeb0 0a67 	vmov.f32	s0, s15
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	88e368f1 	.word	0x88e368f1
 8000c74:	3ee4f8b5 	.word	0x3ee4f8b5

08000c78 <HAL_DFSDM_FilterErrorCallback>:
  }
}

/* DMA Error Callback */
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  Error_Handler();
 8000c80:	f000 f88e 	bl	8000da0 <Error_Handler>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 fac1 	bl	8001216 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f832 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f7ff fe0a 	bl	80008b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c9c:	f7ff fdea 	bl	8000874 <MX_DMA_Init>
  MX_TIM2_Init();
 8000ca0:	f000 f994 	bl	8000fcc <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000ca4:	f7ff fc9c 	bl	80005e0 <MX_DFSDM1_Init>
  MX_SPI2_Init();
 8000ca8:	f000 f880 	bl	8000dac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*) dfdsdm_buffer,
 8000cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb0:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <main+0x5c>)
 8000cb2:	480e      	ldr	r0, [pc, #56]	@ (8000cec <main+0x60>)
 8000cb4:	f000 fe00 	bl	80018b8 <HAL_DFSDM_FilterRegularStart_DMA>
  AUDIO_BUFFER_SIZE);
  HAL_TIM_Base_Start_IT(&htim2);
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <main+0x64>)
 8000cba:	f003 f9f9 	bl	80040b0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */
    if (data_ready) {
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <main+0x68>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0fa      	beq.n	8000cbe <main+0x32>
      data_ready = 0;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <main+0x68>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]

      // Process audio data
      Process_Audio_Data();
 8000cce:	f7ff ff47 	bl	8000b60 <Process_Audio_Data>

      // Clear the display
      TFT_Clear(0x0000);  // Black background
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff fea4 	bl	8000a20 <TFT_Clear>

      // Draw the graph
      TFT_DrawGraph(volume_buffer, AUDIO_BUFFER_SIZE, 0xFFFF);  // White graph
 8000cd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <main+0x6c>)
 8000ce2:	f7ff fee7 	bl	8000ab4 <TFT_DrawGraph>
    if (data_ready) {
 8000ce6:	e7ea      	b.n	8000cbe <main+0x32>
 8000ce8:	2000010c 	.word	0x2000010c
 8000cec:	20000078 	.word	0x20000078
 8000cf0:	20000974 	.word	0x20000974
 8000cf4:	2000090c 	.word	0x2000090c
 8000cf8:	2000050c 	.word	0x2000050c

08000cfc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b096      	sub	sp, #88	@ 0x58
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	2244      	movs	r2, #68	@ 0x44
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 f884 	bl	8004e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000d1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d22:	f001 fb15 	bl	8002350 <HAL_PWREx_ControlVoltageScaling>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x34>
    Error_Handler();
 8000d2c:	f000 f838 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d30:	2310      	movs	r3, #16
 8000d32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d3c:	2360      	movs	r3, #96	@ 0x60
 8000d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d40:	2302      	movs	r3, #2
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d44:	2301      	movs	r3, #1
 8000d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d4c:	2328      	movs	r3, #40	@ 0x28
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d50:	2307      	movs	r3, #7
 8000d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fb4b 	bl	80023fc <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x74>
    Error_Handler();
 8000d6c:	f000 f818 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	603b      	str	r3, [r7, #0]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2303      	movs	r3, #3
 8000d76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000d84:	463b      	mov	r3, r7
 8000d86:	2104      	movs	r1, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 ff13 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x9c>
    Error_Handler();
 8000d94:	f000 f804 	bl	8000da0 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3758      	adds	r7, #88	@ 0x58
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <Error_Handler+0x8>

08000dac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e24 <MX_SPI2_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000dc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000de2:	2210      	movs	r2, #16
 8000de4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000e06:	2208      	movs	r2, #8
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_SPI2_Init+0x74>)
 8000e0c:	f002 fd7a 	bl	8003904 <HAL_SPI_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f7ff ffc3 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000910 	.word	0x20000910
 8000e24:	40003800 	.word	0x40003800

08000e28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a25      	ldr	r2, [pc, #148]	@ (8000edc <HAL_SPI_MspInit+0xb4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d144      	bne.n	8000ed4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4e:	4a24      	ldr	r2, [pc, #144]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e56:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_SPI_MspInit+0xb8>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e92:	2304      	movs	r3, #4
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <HAL_SPI_MspInit+0xbc>)
 8000eae:	f001 f87f 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000eb2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <HAL_SPI_MspInit+0xc0>)
 8000ed0:	f001 f86e 	bl	8001fb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	@ 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40003800 	.word	0x40003800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	48000400 	.word	0x48000400

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f999 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA1_Channel7_IRQHandler+0x10>)
 8000f9a:	f000 ff29 	bl	8001df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200009c0 	.word	0x200009c0

08000fa8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08e      	sub	sp, #56	@ 0x38
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001000:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001004:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 38;
 8001006:	4b2b      	ldr	r3, [pc, #172]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001008:	2226      	movs	r2, #38	@ 0x26
 800100a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b29      	ldr	r3, [pc, #164]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001012:	4b28      	ldr	r3, [pc, #160]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001014:	2201      	movs	r2, #1
 8001016:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b26      	ldr	r3, [pc, #152]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001024:	4823      	ldr	r0, [pc, #140]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001026:	f002 ffeb 	bl	8004000 <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001030:	f7ff feb6 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	4619      	mov	r1, r3
 8001040:	481c      	ldr	r0, [pc, #112]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001042:	f003 f981 	bl	8004348 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800104c:	f7ff fea8 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001050:	4818      	ldr	r0, [pc, #96]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001052:	f003 f89d 	bl	8004190 <HAL_TIM_OC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800105c:	f7ff fea0 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001070:	f003 fe4a 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800107a:	f7ff fe91 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	220c      	movs	r2, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 8001096:	f003 f8dd 	bl	8004254 <HAL_TIM_OC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80010a0:	f7ff fe7e 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MX_TIM2_Init+0xe8>)
 80010a6:	f000 f859 	bl	800115c <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3738      	adds	r7, #56	@ 0x38
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000974 	.word	0x20000974

080010b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c8:	d13d      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_TIM_Base_MspInit+0x98>)
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	4a20      	ldr	r2, [pc, #128]	@ (8001150 <HAL_TIM_Base_MspInit+0x98>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_TIM_Base_MspInit+0x98>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 80010e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <HAL_TIM_Base_MspInit+0xa0>)
 80010e6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 80010ea:	2204      	movs	r2, #4
 80010ec:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 8001102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001106:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 800110a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 8001112:	2220      	movs	r2, #32
 8001114:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 8001118:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800111c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800111e:	480d      	ldr	r0, [pc, #52]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 8001120:	f000 fd4e 	bl	8001bc0 <HAL_DMA_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 800112a:	f7ff fe39 	bl	8000da0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 8001132:	629a      	str	r2, [r3, #40]	@ 0x28
 8001134:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 800113e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <HAL_TIM_Base_MspInit+0x9c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	200009c0 	.word	0x200009c0
 8001158:	40020080 	.word	0x40020080

0800115c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800117c:	d11c      	bne.n	80011b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_TIM_MspPostInit+0x64>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_TIM_MspPostInit+0x64>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_TIM_MspPostInit+0x64>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001196:	2308      	movs	r3, #8
 8001198:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a6:	2301      	movs	r3, #1
 80011a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f000 fefc 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021000 	.word	0x40021000

080011c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c8:	f7ff feee 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <LoopForever+0xe>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001210 <LoopForever+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f003 fe1f 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f6:	f7ff fd49 	bl	8000c8c <main>

080011fa <LoopForever>:

LoopForever:
    b LoopForever
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001208:	08005220 	.word	0x08005220
  ldr r2, =_sbss
 800120c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001210:	20000b68 	.word	0x20000b68

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>

08001216 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f93d 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f80e 	bl	8001248 <HAL_InitTick>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	e001      	b.n	800123c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001238:	f7ff fe58 	bl	8000eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800123c:	79fb      	ldrb	r3, [r7, #7]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <HAL_InitTick+0x6c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d023      	beq.n	80012a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <HAL_InitTick+0x70>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_InitTick+0x6c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f949 	bl	800150a <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10f      	bne.n	800129e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d809      	bhi.n	8001298 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f000 f913 	bl	80014b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001290:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <HAL_InitTick+0x74>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e007      	b.n	80012a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e004      	b.n	80012a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e001      	b.n	80012a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000a08 	.word	0x20000a08

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000a08 	.word	0x20000a08

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	@ (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0ac      	b.n	8001690 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fa9e 	bl	8001a7c <DFSDM_GetChannelFromInstance>
 8001540:	4603      	mov	r3, r0
 8001542:	4a55      	ldr	r2, [pc, #340]	@ (8001698 <HAL_DFSDM_ChannelInit+0x174>)
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e09f      	b.n	8001690 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff f91f 	bl	8000794 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001556:	4b51      	ldr	r3, [pc, #324]	@ (800169c <HAL_DFSDM_ChannelInit+0x178>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	4a4f      	ldr	r2, [pc, #316]	@ (800169c <HAL_DFSDM_ChannelInit+0x178>)
 800155e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001560:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <HAL_DFSDM_ChannelInit+0x178>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d125      	bne.n	80015b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001568:	4b4d      	ldr	r3, [pc, #308]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a4c      	ldr	r2, [pc, #304]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800156e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001572:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001574:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4948      	ldr	r1, [pc, #288]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001582:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a46      	ldr	r2, [pc, #280]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001588:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800158c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	791b      	ldrb	r3, [r3, #4]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001596:	4b42      	ldr	r3, [pc, #264]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	3b01      	subs	r3, #1
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	493f      	ldr	r1, [pc, #252]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80015a8:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a3c      	ldr	r2, [pc, #240]	@ (80016a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80015c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 020f 	bic.w	r2, r2, #15
 80015f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001618:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6899      	ldr	r1, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	3b01      	subs	r3, #1
 800162a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f002 0207 	and.w	r2, r2, #7
 8001644:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001650:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001670:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f9fc 	bl	8001a7c <DFSDM_GetChannelFromInstance>
 8001684:	4602      	mov	r2, r0
 8001686:	4904      	ldr	r1, [pc, #16]	@ (8001698 <HAL_DFSDM_ChannelInit+0x174>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000a10 	.word	0x20000a10
 800169c:	20000a0c 	.word	0x20000a0c
 80016a0:	40016000 	.word	0x40016000

080016a4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0ca      	b.n	800184c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a66      	ldr	r2, [pc, #408]	@ (8001854 <HAL_DFSDM_FilterInit+0x1b0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d109      	bne.n	80016d4 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d003      	beq.n	80016d0 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0bb      	b.n	800184c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7fe ffe1 	bl	80006b4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001700:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7a1b      	ldrb	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e007      	b.n	800172c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800172a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7a5b      	ldrb	r3, [r3, #9]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e007      	b.n	8001756 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8001764:	f023 0308 	bic.w	r3, r3, #8
 8001768:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d108      	bne.n	8001784 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7c1b      	ldrb	r3, [r3, #16]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0210 	orr.w	r2, r2, #16
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e007      	b.n	80017ae <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0210 	bic.w	r2, r2, #16
 80017ac:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7c5b      	ldrb	r3, [r3, #17]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0220 	orr.w	r2, r2, #32
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0220 	bic.w	r2, r2, #32
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80017e6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80017ea:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6959      	ldr	r1, [r3, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80017fe:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001804:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001806:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699a      	ldr	r2, [r3, #24]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7c1a      	ldrb	r2, [r3, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40016100 	.word	0x40016100

08001858 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d01b      	beq.n	80018a8 <HAL_DFSDM_FilterConfigInjChannel+0x50>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001876:	2bff      	cmp	r3, #255	@ 0xff
 8001878:	d016      	beq.n	80018a8 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t)(Channel & DFSDM_LSB_MASK);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	b292      	uxth	r2, r2
 8001882:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	f000 f8da 	bl	8001a3e <DFSDM_GetInjChannelsNbr>
 800188a:	4602      	mov	r2, r0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001896:	2b01      	cmp	r3, #1
 8001898:	d102      	bne.n	80018a0 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	e000      	b.n	80018a2 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80018a0:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80018a6:	e001      	b.n	80018ac <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	75fb      	strb	r3, [r7, #23]
 80018d8:	e064      	b.n	80019a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80018e8:	d002      	beq.n	80018f0 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
 80018ee:	e059      	b.n	80019a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10e      	bne.n	8001916 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d002      	beq.n	8001916 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	e046      	b.n	80019a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10b      	bne.n	8001936 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001922:	2b00      	cmp	r3, #0
 8001924:	d107      	bne.n	8001936 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800192c:	2b20      	cmp	r3, #32
 800192e:	d102      	bne.n	8001936 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	75fb      	strb	r3, [r7, #23]
 8001934:	e036      	b.n	80019a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800193c:	2b01      	cmp	r3, #1
 800193e:	d004      	beq.n	800194a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001946:	2b03      	cmp	r3, #3
 8001948:	d12a      	bne.n	80019a0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	4a18      	ldr	r2, [pc, #96]	@ (80019b0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	4a17      	ldr	r2, [pc, #92]	@ (80019b4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001960:	2b20      	cmp	r3, #32
 8001962:	d101      	bne.n	8001968 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001966:	e000      	b.n	800196a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001968:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	331c      	adds	r3, #28
 800197a:	4619      	mov	r1, r3
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f000 f9d6 	bl	8001d30 <HAL_DMA_Start_IT>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	22ff      	movs	r2, #255	@ 0xff
 800198e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001996:	e005      	b.n	80019a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f8bb 	bl	8001b14 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800199e:	e001      	b.n	80019a4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	08001a01 	.word	0x08001a01
 80019b4:	08001a1d 	.word	0x08001a1d
 80019b8:	080019e5 	.word	0x080019e5

080019bc <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff ffec 	bl	80019d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7ff ffd4 	bl	80019bc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff f921 	bl	8000c78 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t)(Channels & DFSDM_LSB_MASK);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	60bb      	str	r3, [r7, #8]
  while (tmp != 0U)
 8001a50:	e00a      	b.n	8001a68 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if ((tmp & 1U) != 0U)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t)(tmp >> 1);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	085b      	lsrs	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
  while (tmp != 0U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f1      	bne.n	8001a52 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <DFSDM_GetChannelFromInstance+0x7c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d102      	bne.n	8001a92 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e02b      	b.n	8001aea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <DFSDM_GetChannelFromInstance+0x80>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d102      	bne.n	8001aa0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	e024      	b.n	8001aea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <DFSDM_GetChannelFromInstance+0x84>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d102      	bne.n	8001aae <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	e01d      	b.n	8001aea <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <DFSDM_GetChannelFromInstance+0x88>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d102      	bne.n	8001abc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e016      	b.n	8001aea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d102      	bne.n	8001aca <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e00f      	b.n	8001aea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b0c <DFSDM_GetChannelFromInstance+0x90>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d102      	bne.n	8001ad8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e008      	b.n	8001aea <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <DFSDM_GetChannelFromInstance+0x94>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d102      	bne.n	8001ae6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e001      	b.n	8001aea <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40016000 	.word	0x40016000
 8001afc:	40016020 	.word	0x40016020
 8001b00:	40016040 	.word	0x40016040
 8001b04:	40016080 	.word	0x40016080
 8001b08:	400160a0 	.word	0x400160a0
 8001b0c:	400160c0 	.word	0x400160c0
 8001b10:	400160e0 	.word	0x400160e0

08001b14 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d108      	bne.n	8001b36 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e033      	b.n	8001b9e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001b54:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d116      	bne.n	8001b9e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0202 	orr.w	r2, r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <DFSDM_RegConvStart+0x84>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	e000      	b.n	8001b9a <DFSDM_RegConvStart+0x86>
 8001b98:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <DFSDM_RegConvStart+0x98>
 8001ba8:	2202      	movs	r2, #2
 8001baa:	e000      	b.n	8001bae <DFSDM_RegConvStart+0x9a>
 8001bac:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e098      	b.n	8001d04 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d10 <HAL_DMA_Init+0x150>)
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d80f      	bhi.n	8001bfe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d14 <HAL_DMA_Init+0x154>)
 8001be6:	4413      	add	r3, r2
 8001be8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d18 <HAL_DMA_Init+0x158>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	009a      	lsls	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	@ (8001d1c <HAL_DMA_Init+0x15c>)
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bfc:	e00e      	b.n	8001c1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <HAL_DMA_Init+0x160>)
 8001c06:	4413      	add	r3, r2
 8001c08:	4a43      	ldr	r2, [pc, #268]	@ (8001d18 <HAL_DMA_Init+0x158>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	009a      	lsls	r2, r3, #2
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a42      	ldr	r2, [pc, #264]	@ (8001d24 <HAL_DMA_Init+0x164>)
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c76:	d039      	beq.n	8001cec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	4a27      	ldr	r2, [pc, #156]	@ (8001d1c <HAL_DMA_Init+0x15c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d11a      	bne.n	8001cb8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c82:	4b29      	ldr	r3, [pc, #164]	@ (8001d28 <HAL_DMA_Init+0x168>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f003 031c 	and.w	r3, r3, #28
 8001c8e:	210f      	movs	r1, #15
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4924      	ldr	r1, [pc, #144]	@ (8001d28 <HAL_DMA_Init+0x168>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <HAL_DMA_Init+0x168>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	f003 031c 	and.w	r3, r3, #28
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	491d      	ldr	r1, [pc, #116]	@ (8001d28 <HAL_DMA_Init+0x168>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
 8001cb6:	e019      	b.n	8001cec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d2c <HAL_DMA_Init+0x16c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc0:	f003 031c 	and.w	r3, r3, #28
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4917      	ldr	r1, [pc, #92]	@ (8001d2c <HAL_DMA_Init+0x16c>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001cd2:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <HAL_DMA_Init+0x16c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6859      	ldr	r1, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f003 031c 	and.w	r3, r3, #28
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	4911      	ldr	r1, [pc, #68]	@ (8001d2c <HAL_DMA_Init+0x16c>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40020407 	.word	0x40020407
 8001d14:	bffdfff8 	.word	0xbffdfff8
 8001d18:	cccccccd 	.word	0xcccccccd
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	bffdfbf8 	.word	0xbffdfbf8
 8001d24:	40020400 	.word	0x40020400
 8001d28:	400200a8 	.word	0x400200a8
 8001d2c:	400204a8 	.word	0x400204a8

08001d30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_DMA_Start_IT+0x20>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e04b      	b.n	8001de8 <HAL_DMA_Start_IT+0xb8>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d13a      	bne.n	8001dda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	68b9      	ldr	r1, [r7, #8]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f8e0 	bl	8001f4e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 020e 	orr.w	r2, r2, #14
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e00f      	b.n	8001dc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 020a 	orr.w	r2, r2, #10
 8001dc6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e005      	b.n	8001de6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	f003 031c 	and.w	r3, r3, #28
 8001e10:	2204      	movs	r2, #4
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d026      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x7a>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d021      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e48:	f003 021c 	and.w	r2, r3, #28
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	2104      	movs	r1, #4
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d071      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e68:	e06c      	b.n	8001f44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f003 031c 	and.w	r3, r3, #28
 8001e72:	2202      	movs	r2, #2
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02e      	beq.n	8001edc <HAL_DMA_IRQHandler+0xec>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d029      	beq.n	8001edc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10b      	bne.n	8001eae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 020a 	bic.w	r2, r2, #10
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f003 021c 	and.w	r2, r3, #28
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	2102      	movs	r1, #2
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d038      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001eda:	e033      	b.n	8001f44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	f003 031c 	and.w	r3, r3, #28
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d02a      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x156>
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d025      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 020e 	bic.w	r2, r2, #14
 8001f08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f003 021c 	and.w	r2, r3, #28
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
}
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f60:	f003 021c 	and.w	r2, r3, #28
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d108      	bne.n	8001f92 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f90:	e007      	b.n	8001fa2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	60da      	str	r2, [r3, #12]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e17f      	b.n	80022c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 8171 	beq.w	80022ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d005      	beq.n	8001ff0 <HAL_GPIO_Init+0x40>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d130      	bne.n	8002052 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002026:	2201      	movs	r2, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 0201 	and.w	r2, r3, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d118      	bne.n	8002090 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d017      	beq.n	80020cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d123      	bne.n	8002120 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80ac 	beq.w	80022ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b5f      	ldr	r3, [pc, #380]	@ (80022e0 <HAL_GPIO_Init+0x330>)
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4a5e      	ldr	r2, [pc, #376]	@ (80022e0 <HAL_GPIO_Init+0x330>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6613      	str	r3, [r2, #96]	@ 0x60
 800216e:	4b5c      	ldr	r3, [pc, #368]	@ (80022e0 <HAL_GPIO_Init+0x330>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800217a:	4a5a      	ldr	r2, [pc, #360]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021a4:	d025      	beq.n	80021f2 <HAL_GPIO_Init+0x242>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4f      	ldr	r2, [pc, #316]	@ (80022e8 <HAL_GPIO_Init+0x338>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <HAL_GPIO_Init+0x23e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4e      	ldr	r2, [pc, #312]	@ (80022ec <HAL_GPIO_Init+0x33c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x23a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a4d      	ldr	r2, [pc, #308]	@ (80022f0 <HAL_GPIO_Init+0x340>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x236>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4c      	ldr	r2, [pc, #304]	@ (80022f4 <HAL_GPIO_Init+0x344>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x232>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	@ (80022f8 <HAL_GPIO_Init+0x348>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x22e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4a      	ldr	r2, [pc, #296]	@ (80022fc <HAL_GPIO_Init+0x34c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x22a>
 80021d6:	2306      	movs	r3, #6
 80021d8:	e00c      	b.n	80021f4 <HAL_GPIO_Init+0x244>
 80021da:	2307      	movs	r3, #7
 80021dc:	e00a      	b.n	80021f4 <HAL_GPIO_Init+0x244>
 80021de:	2305      	movs	r3, #5
 80021e0:	e008      	b.n	80021f4 <HAL_GPIO_Init+0x244>
 80021e2:	2304      	movs	r3, #4
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x244>
 80021e6:	2303      	movs	r3, #3
 80021e8:	e004      	b.n	80021f4 <HAL_GPIO_Init+0x244>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e002      	b.n	80021f4 <HAL_GPIO_Init+0x244>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <HAL_GPIO_Init+0x244>
 80021f2:	2300      	movs	r3, #0
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	f002 0203 	and.w	r2, r2, #3
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4093      	lsls	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002204:	4937      	ldr	r1, [pc, #220]	@ (80022e4 <HAL_GPIO_Init+0x334>)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	3302      	adds	r3, #2
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002212:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <HAL_GPIO_Init+0x350>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	43db      	mvns	r3, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002236:	4a32      	ldr	r2, [pc, #200]	@ (8002300 <HAL_GPIO_Init+0x350>)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800223c:	4b30      	ldr	r3, [pc, #192]	@ (8002300 <HAL_GPIO_Init+0x350>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002260:	4a27      	ldr	r2, [pc, #156]	@ (8002300 <HAL_GPIO_Init+0x350>)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002266:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <HAL_GPIO_Init+0x350>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800228a:	4a1d      	ldr	r2, [pc, #116]	@ (8002300 <HAL_GPIO_Init+0x350>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <HAL_GPIO_Init+0x350>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022b4:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <HAL_GPIO_Init+0x350>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f47f ae78 	bne.w	8001fc0 <HAL_GPIO_Init+0x10>
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40010000 	.word	0x40010000
 80022e8:	48000400 	.word	0x48000400
 80022ec:	48000800 	.word	0x48000800
 80022f0:	48000c00 	.word	0x48000c00
 80022f4:	48001000 	.word	0x48001000
 80022f8:	48001400 	.word	0x48001400
 80022fc:	48001800 	.word	0x48001800
 8002300:	40010400 	.word	0x40010400

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002320:	e002      	b.n	8002328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <HAL_PWREx_GetVoltageRange+0x18>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000

08002350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235e:	d130      	bne.n	80023c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002360:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236c:	d038      	beq.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002376:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002378:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800237e:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2232      	movs	r2, #50	@ 0x32
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	4a1b      	ldr	r2, [pc, #108]	@ (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	3301      	adds	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002394:	e002      	b.n	800239c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3b01      	subs	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a8:	d102      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f2      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023bc:	d110      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e00f      	b.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d007      	beq.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d0:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d8:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40007000 	.word	0x40007000
 80023f4:	20000000 	.word	0x20000000
 80023f8:	431bde83 	.word	0x431bde83

080023fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e3ca      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	4b97      	ldr	r3, [pc, #604]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002418:	4b94      	ldr	r3, [pc, #592]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80e4 	beq.w	80025f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_RCC_OscConfig+0x4a>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	f040 808b 	bne.w	8002554 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 8087 	bne.w	8002554 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002446:	4b89      	ldr	r3, [pc, #548]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e3a2      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	4b82      	ldr	r3, [pc, #520]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_RCC_OscConfig+0x7c>
 800246e:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002476:	e005      	b.n	8002484 <HAL_RCC_OscConfig+0x88>
 8002478:	4b7c      	ldr	r3, [pc, #496]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002484:	4293      	cmp	r3, r2
 8002486:	d223      	bcs.n	80024d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fd1d 	bl	8002ecc <RCC_SetFlashLatencyFromMSIRange>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e383      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249c:	4b73      	ldr	r3, [pc, #460]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a72      	ldr	r2, [pc, #456]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b70      	ldr	r3, [pc, #448]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	496d      	ldr	r1, [pc, #436]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ba:	4b6c      	ldr	r3, [pc, #432]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	4968      	ldr	r1, [pc, #416]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
 80024ce:	e025      	b.n	800251c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d0:	4b66      	ldr	r3, [pc, #408]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a65      	ldr	r2, [pc, #404]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4960      	ldr	r1, [pc, #384]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ee:	4b5f      	ldr	r3, [pc, #380]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	495b      	ldr	r1, [pc, #364]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fcdd 	bl	8002ecc <RCC_SetFlashLatencyFromMSIRange>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e343      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251c:	f000 fc4a 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b52      	ldr	r3, [pc, #328]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	4950      	ldr	r1, [pc, #320]	@ (8002670 <HAL_RCC_OscConfig+0x274>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	4a4e      	ldr	r2, [pc, #312]	@ (8002674 <HAL_RCC_OscConfig+0x278>)
 800253a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800253c:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <HAL_RCC_OscConfig+0x27c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fe81 	bl	8001248 <HAL_InitTick>
 8002546:	4603      	mov	r3, r0
 8002548:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d052      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	e327      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d032      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800255c:	4b43      	ldr	r3, [pc, #268]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a42      	ldr	r2, [pc, #264]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002568:	f7fe febe 	bl	80012e8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002570:	f7fe feba 	bl	80012e8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e310      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002582:	4b3a      	ldr	r3, [pc, #232]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258e:	4b37      	ldr	r3, [pc, #220]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a36      	ldr	r2, [pc, #216]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b34      	ldr	r3, [pc, #208]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4931      	ldr	r1, [pc, #196]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ac:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	492c      	ldr	r1, [pc, #176]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	e01a      	b.n	80025f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a29      	ldr	r2, [pc, #164]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fe8b 	bl	80012e8 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d6:	f7fe fe87 	bl	80012e8 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2dd      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e8:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x1da>
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d074      	beq.n	80026ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b08      	cmp	r3, #8
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x21a>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d10e      	bne.n	800262e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d10b      	bne.n	800262e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d064      	beq.n	80026ec <HAL_RCC_OscConfig+0x2f0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d160      	bne.n	80026ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e2ba      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x24a>
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e026      	b.n	8002694 <HAL_RCC_OscConfig+0x298>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264e:	d115      	bne.n	800267c <HAL_RCC_OscConfig+0x280>
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a05      	ldr	r2, [pc, #20]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002656:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a02      	ldr	r2, [pc, #8]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e014      	b.n	8002694 <HAL_RCC_OscConfig+0x298>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	080051d4 	.word	0x080051d4
 8002674:	20000000 	.word	0x20000000
 8002678:	20000004 	.word	0x20000004
 800267c:	4ba0      	ldr	r3, [pc, #640]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a9f      	ldr	r2, [pc, #636]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b9d      	ldr	r3, [pc, #628]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a9c      	ldr	r2, [pc, #624]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fe24 	bl	80012e8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe fe20 	bl	80012e8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	@ 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e276      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b6:	4b92      	ldr	r3, [pc, #584]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2a8>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fe10 	bl	80012e8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fe0c 	bl	80012e8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	@ 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e262      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026de:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d0>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d060      	beq.n	80027bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x310>
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d119      	bne.n	800273a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d116      	bne.n	800273a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270c:	4b7c      	ldr	r3, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x328>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e23f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b76      	ldr	r3, [pc, #472]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	4973      	ldr	r1, [pc, #460]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002738:	e040      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d023      	beq.n	800278a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002742:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6e      	ldr	r2, [pc, #440]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fdcb 	bl	80012e8 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002756:	f7fe fdc7 	bl	80012e8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e21d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002768:	4b65      	ldr	r3, [pc, #404]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b62      	ldr	r3, [pc, #392]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	495f      	ldr	r1, [pc, #380]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e018      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b5d      	ldr	r3, [pc, #372]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5c      	ldr	r2, [pc, #368]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fda7 	bl	80012e8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fda3 	bl	80012e8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1f9      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b0:	4b53      	ldr	r3, [pc, #332]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03c      	beq.n	8002842 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01c      	beq.n	800280a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe fd82 	bl	80012e8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe fd7e 	bl	80012e8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1d4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fa:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x3ec>
 8002808:	e01b      	b.n	8002842 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002810:	4a3b      	ldr	r2, [pc, #236]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe fd65 	bl	80012e8 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fd61 	bl	80012e8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1b7      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002834:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a6 	beq.w	800299c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002854:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	4a26      	ldr	r2, [pc, #152]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	@ 0x58
 800286c:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287c:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d118      	bne.n	80028ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002888:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002892:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002894:	f7fe fd28 	bl	80012e8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe fd24 	bl	80012e8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e17a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4d8>
 80028c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d2:	e029      	b.n	8002928 <HAL_RCC_OscConfig+0x52c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d115      	bne.n	8002908 <HAL_RCC_OscConfig+0x50c>
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	4a03      	ldr	r2, [pc, #12]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x52c>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	4b9c      	ldr	r3, [pc, #624]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	4a9b      	ldr	r2, [pc, #620]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002918:	4b98      	ldr	r3, [pc, #608]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	4a97      	ldr	r2, [pc, #604]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fcda 	bl	80012e8 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fcd6 	bl	80012e8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e12a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ed      	beq.n	8002938 <HAL_RCC_OscConfig+0x53c>
 800295c:	e015      	b.n	800298a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe fcc3 	bl	80012e8 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe fcbf 	bl	80012e8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e113      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ed      	bne.n	8002966 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298a:	7ffb      	ldrb	r3, [r7, #31]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b7a      	ldr	r3, [pc, #488]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	4a79      	ldr	r2, [pc, #484]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80fe 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	f040 80d0 	bne.w	8002b50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029b0:	4b72      	ldr	r3, [pc, #456]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d130      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d127      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d11f      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029f0:	2a07      	cmp	r2, #7
 80029f2:	bf14      	ite	ne
 80029f4:	2201      	movne	r2, #1
 80029f6:	2200      	moveq	r2, #0
 80029f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d113      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d06e      	beq.n	8002b04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d069      	beq.n	8002b00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0ad      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a48:	4b4c      	ldr	r3, [pc, #304]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a54:	f7fe fc48 	bl	80012e8 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fc44 	bl	80012e8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e09a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6e:	4b43      	ldr	r3, [pc, #268]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7a:	4b40      	ldr	r3, [pc, #256]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	4b40      	ldr	r3, [pc, #256]	@ (8002b80 <HAL_RCC_OscConfig+0x784>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a94:	0212      	lsls	r2, r2, #8
 8002a96:	4311      	orrs	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a9c:	0852      	lsrs	r2, r2, #1
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	0552      	lsls	r2, r2, #21
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002aa8:	0852      	lsrs	r2, r2, #1
 8002aaa:	3a01      	subs	r2, #1
 8002aac:	0652      	lsls	r2, r2, #25
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ab4:	0912      	lsrs	r2, r2, #4
 8002ab6:	0452      	lsls	r2, r2, #17
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	4930      	ldr	r1, [pc, #192]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002acc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad8:	f7fe fc06 	bl	80012e8 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fc02 	bl	80012e8 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e058      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afe:	e050      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e04f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b04:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d148      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b28:	f7fe fbde 	bl	80012e8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe fbda 	bl	80012e8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e030      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x734>
 8002b4e:	e028      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d023      	beq.n	8002b9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a08      	ldr	r2, [pc, #32]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe fbc1 	bl	80012e8 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e00c      	b.n	8002b84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fbbd 	bl	80012e8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d905      	bls.n	8002b84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x7b0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ec      	bne.n	8002b6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b90:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_RCC_OscConfig+0x7b0>)
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	4905      	ldr	r1, [pc, #20]	@ (8002bac <HAL_RCC_OscConfig+0x7b0>)
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_RCC_OscConfig+0x7b4>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
 8002b9c:	e001      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	feeefffc 	.word	0xfeeefffc

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0e7      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b75      	ldr	r3, [pc, #468]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b72      	ldr	r3, [pc, #456]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4970      	ldr	r1, [pc, #448]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b6e      	ldr	r3, [pc, #440]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0cf      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d010      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d908      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b63      	ldr	r3, [pc, #396]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4960      	ldr	r1, [pc, #384]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04c      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d121      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0a6      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c52:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e09a      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e08e      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e086      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b46      	ldr	r3, [pc, #280]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4943      	ldr	r1, [pc, #268]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fb24 	bl	80012e8 <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fb20 	bl	80012e8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e06e      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b3a      	ldr	r3, [pc, #232]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d208      	bcs.n	8002cfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	492b      	ldr	r1, [pc, #172]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfa:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d210      	bcs.n	8002d2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d08:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 0207 	bic.w	r2, r3, #7
 8002d10:	4923      	ldr	r1, [pc, #140]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e036      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d36:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4918      	ldr	r1, [pc, #96]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4910      	ldr	r1, [pc, #64]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d68:	f000 f824 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	490b      	ldr	r1, [pc, #44]	@ (8002da8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	4a09      	ldr	r2, [pc, #36]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fa5b 	bl	8001248 <HAL_InitTick>
 8002d92:	4603      	mov	r3, r0
 8002d94:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d96:	7afb      	ldrb	r3, [r7, #11]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40021000 	.word	0x40021000
 8002da8:	080051d4 	.word	0x080051d4
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	@ 0x24
 8002db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d121      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d11e      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002de8:	4b34      	ldr	r3, [pc, #208]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002df4:	4b31      	ldr	r3, [pc, #196]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e005      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e04:	4b2d      	ldr	r3, [pc, #180]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e10:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e004      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e38:	4b23      	ldr	r3, [pc, #140]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d134      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e42:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d003      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0xac>
 8002e58:	e005      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e5c:	617b      	str	r3, [r7, #20]
      break;
 8002e5e:	e005      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e60:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e62:	617b      	str	r3, [r7, #20]
      break;
 8002e64:	e002      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	617b      	str	r3, [r7, #20]
      break;
 8002e6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	fb03 f202 	mul.w	r2, r3, r2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	0e5b      	lsrs	r3, r3, #25
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eac:	69bb      	ldr	r3, [r7, #24]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	080051e4 	.word	0x080051e4
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	007a1200 	.word	0x007a1200

08002ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ee4:	f7ff fa26 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8002ee8:	6178      	str	r0, [r7, #20]
 8002eea:	e014      	b.n	8002f16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eec:	4b25      	ldr	r3, [pc, #148]	@ (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef0:	4a24      	ldr	r2, [pc, #144]	@ (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef8:	4b22      	ldr	r3, [pc, #136]	@ (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f04:	f7ff fa16 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8002f08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f1c:	d10b      	bne.n	8002f36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b80      	cmp	r3, #128	@ 0x80
 8002f22:	d919      	bls.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f28:	d902      	bls.n	8002f30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e013      	b.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f30:	2301      	movs	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	e010      	b.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b80      	cmp	r3, #128	@ 0x80
 8002f3a:	d902      	bls.n	8002f42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	e00a      	b.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b80      	cmp	r3, #128	@ 0x80
 8002f46:	d102      	bne.n	8002f4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f48:	2302      	movs	r3, #2
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	e004      	b.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b70      	cmp	r3, #112	@ 0x70
 8002f52:	d101      	bne.n	8002f58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f54:	2301      	movs	r3, #1
 8002f56:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 0207 	bic.w	r2, r3, #7
 8002f60:	4909      	ldr	r1, [pc, #36]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f68:	4b07      	ldr	r3, [pc, #28]	@ (8002f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d001      	beq.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40022000 	.word	0x40022000

08002f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f94:	2300      	movs	r3, #0
 8002f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f98:	2300      	movs	r3, #0
 8002f9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d041      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002fac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fb0:	d02a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fb6:	d824      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fbc:	d008      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fc2:	d81e      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fcc:	d010      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fce:	e018      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fd0:	4b86      	ldr	r3, [pc, #536]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a85      	ldr	r2, [pc, #532]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fdc:	e015      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fabb 	bl	8003560 <RCCEx_PLLSAI1_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fee:	e00c      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3320      	adds	r3, #32
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fba6 	bl	8003748 <RCCEx_PLLSAI2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003000:	e003      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	74fb      	strb	r3, [r7, #19]
      break;
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300a:	7cfb      	ldrb	r3, [r7, #19]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003010:	4b76      	ldr	r3, [pc, #472]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800301e:	4973      	ldr	r1, [pc, #460]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003026:	e001      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d041      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800303c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003040:	d02a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003042:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003046:	d824      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003048:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800304c:	d008      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800304e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003052:	d81e      	bhi.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800305c:	d010      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800305e:	e018      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003060:	4b62      	ldr	r3, [pc, #392]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a61      	ldr	r2, [pc, #388]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800306c:	e015      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fa73 	bl	8003560 <RCCEx_PLLSAI1_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800307e:	e00c      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3320      	adds	r3, #32
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fb5e 	bl	8003748 <RCCEx_PLLSAI2_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003090:	e003      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	74fb      	strb	r3, [r7, #19]
      break;
 8003096:	e000      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309a:	7cfb      	ldrb	r3, [r7, #19]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10b      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030a0:	4b52      	ldr	r3, [pc, #328]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ae:	494f      	ldr	r1, [pc, #316]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030b6:	e001      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a0 	beq.w	800320a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ca:	2300      	movs	r3, #0
 80030cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ce:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	4b41      	ldr	r3, [pc, #260]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e8:	4a40      	ldr	r2, [pc, #256]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f0:	4b3e      	ldr	r3, [pc, #248]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003100:	4b3b      	ldr	r3, [pc, #236]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a3a      	ldr	r2, [pc, #232]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800310c:	f7fe f8ec 	bl	80012e8 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003112:	e009      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe f8e8 	bl	80012e8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	74fb      	strb	r3, [r7, #19]
        break;
 8003126:	e005      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003128:	4b31      	ldr	r3, [pc, #196]	@ (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ef      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d15c      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800313a:	4b2c      	ldr	r3, [pc, #176]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003144:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01f      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d019      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003158:	4b24      	ldr	r3, [pc, #144]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003164:	4b21      	ldr	r3, [pc, #132]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	4a20      	ldr	r2, [pc, #128]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003174:	4b1d      	ldr	r3, [pc, #116]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	4a1c      	ldr	r2, [pc, #112]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003184:	4a19      	ldr	r2, [pc, #100]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe f8a7 	bl	80012e8 <HAL_GetTick>
 800319a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319c:	e00b      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe f8a3 	bl	80012e8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d902      	bls.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	74fb      	strb	r3, [r7, #19]
            break;
 80031b4:	e006      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b6:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0ec      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ca:	4b08      	ldr	r3, [pc, #32]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031da:	4904      	ldr	r1, [pc, #16]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031e2:	e009      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	74bb      	strb	r3, [r7, #18]
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031f8:	7c7b      	ldrb	r3, [r7, #17]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d105      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fe:	4b9e      	ldr	r3, [pc, #632]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003202:	4a9d      	ldr	r2, [pc, #628]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003208:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003216:	4b98      	ldr	r3, [pc, #608]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321c:	f023 0203 	bic.w	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	4994      	ldr	r1, [pc, #592]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003238:	4b8f      	ldr	r3, [pc, #572]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f023 020c 	bic.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003246:	498c      	ldr	r1, [pc, #560]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800325a:	4b87      	ldr	r3, [pc, #540]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	4983      	ldr	r1, [pc, #524]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800327c:	4b7e      	ldr	r3, [pc, #504]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	497b      	ldr	r1, [pc, #492]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800329e:	4b76      	ldr	r3, [pc, #472]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ac:	4972      	ldr	r1, [pc, #456]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ce:	496a      	ldr	r1, [pc, #424]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032e2:	4b65      	ldr	r3, [pc, #404]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	4961      	ldr	r1, [pc, #388]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003304:	4b5c      	ldr	r3, [pc, #368]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003312:	4959      	ldr	r1, [pc, #356]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003326:	4b54      	ldr	r3, [pc, #336]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003334:	4950      	ldr	r1, [pc, #320]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003348:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	4948      	ldr	r1, [pc, #288]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800336a:	4b43      	ldr	r3, [pc, #268]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	493f      	ldr	r1, [pc, #252]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d028      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800338c:	4b3a      	ldr	r3, [pc, #232]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800339a:	4937      	ldr	r1, [pc, #220]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033aa:	d106      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ac:	4b32      	ldr	r3, [pc, #200]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a31      	ldr	r2, [pc, #196]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b6:	60d3      	str	r3, [r2, #12]
 80033b8:	e011      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033c2:	d10c      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	2101      	movs	r1, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f8c8 	bl	8003560 <RCCEx_PLLSAI1_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033da:	7cfb      	ldrb	r3, [r7, #19]
 80033dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d028      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033ea:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f8:	491f      	ldr	r1, [pc, #124]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003408:	d106      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800340a:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	4a1a      	ldr	r2, [pc, #104]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003414:	60d3      	str	r3, [r2, #12]
 8003416:	e011      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f899 	bl	8003560 <RCCEx_PLLSAI1_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d02b      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003448:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003456:	4908      	ldr	r1, [pc, #32]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003466:	d109      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a02      	ldr	r2, [pc, #8]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003472:	60d3      	str	r3, [r2, #12]
 8003474:	e014      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003480:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003484:	d10c      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	2101      	movs	r1, #1
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f867 	bl	8003560 <RCCEx_PLLSAI1_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d02f      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ac:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ba:	4928      	ldr	r1, [pc, #160]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ca:	d10d      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	2102      	movs	r1, #2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f844 	bl	8003560 <RCCEx_PLLSAI1_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d014      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034e2:	7cfb      	ldrb	r3, [r7, #19]
 80034e4:	74bb      	strb	r3, [r7, #18]
 80034e6:	e011      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3320      	adds	r3, #32
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f925 	bl	8003748 <RCCEx_PLLSAI2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003518:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003526:	490d      	ldr	r1, [pc, #52]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800353a:	4b08      	ldr	r3, [pc, #32]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003540:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800354a:	4904      	ldr	r1, [pc, #16]	@ (800355c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003552:	7cbb      	ldrb	r3, [r7, #18]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40021000 	.word	0x40021000

08003560 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800356e:	4b75      	ldr	r3, [pc, #468]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800357a:	4b72      	ldr	r3, [pc, #456]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0203 	and.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d10d      	bne.n	80035a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
       ||
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003592:	4b6c      	ldr	r3, [pc, #432]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
       ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d047      	beq.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	e044      	b.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d018      	beq.n	80035e6 <RCCEx_PLLSAI1_Config+0x86>
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d825      	bhi.n	8003604 <RCCEx_PLLSAI1_Config+0xa4>
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d002      	beq.n	80035c2 <RCCEx_PLLSAI1_Config+0x62>
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d009      	beq.n	80035d4 <RCCEx_PLLSAI1_Config+0x74>
 80035c0:	e020      	b.n	8003604 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035c2:	4b60      	ldr	r3, [pc, #384]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11d      	bne.n	800360a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d2:	e01a      	b.n	800360a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d116      	bne.n	800360e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e013      	b.n	800360e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035e6:	4b57      	ldr	r3, [pc, #348]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035f2:	4b54      	ldr	r3, [pc, #336]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003602:	e006      	b.n	8003612 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      break;
 8003608:	e004      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003612:	bf00      	nop
    }

    if(status == HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800361a:	4b4a      	ldr	r3, [pc, #296]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	3b01      	subs	r3, #1
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	430b      	orrs	r3, r1
 8003630:	4944      	ldr	r1, [pc, #272]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d17d      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800363c:	4b41      	ldr	r3, [pc, #260]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a40      	ldr	r2, [pc, #256]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fd fe4e 	bl	80012e8 <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800364e:	e009      	b.n	8003664 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003650:	f7fd fe4a 	bl	80012e8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d902      	bls.n	8003664 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	73fb      	strb	r3, [r7, #15]
        break;
 8003662:	e005      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003664:	4b37      	ldr	r3, [pc, #220]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ef      	bne.n	8003650 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d160      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d111      	bne.n	80036a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800367c:	4b31      	ldr	r3, [pc, #196]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	6892      	ldr	r2, [r2, #8]
 800368c:	0211      	lsls	r1, r2, #8
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	0912      	lsrs	r2, r2, #4
 8003694:	0452      	lsls	r2, r2, #17
 8003696:	430a      	orrs	r2, r1
 8003698:	492a      	ldr	r1, [pc, #168]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	610b      	str	r3, [r1, #16]
 800369e:	e027      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d112      	bne.n	80036cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a6:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80036ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6892      	ldr	r2, [r2, #8]
 80036b6:	0211      	lsls	r1, r2, #8
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6912      	ldr	r2, [r2, #16]
 80036bc:	0852      	lsrs	r2, r2, #1
 80036be:	3a01      	subs	r2, #1
 80036c0:	0552      	lsls	r2, r2, #21
 80036c2:	430a      	orrs	r2, r1
 80036c4:	491f      	ldr	r1, [pc, #124]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	610b      	str	r3, [r1, #16]
 80036ca:	e011      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6892      	ldr	r2, [r2, #8]
 80036dc:	0211      	lsls	r1, r2, #8
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6952      	ldr	r2, [r2, #20]
 80036e2:	0852      	lsrs	r2, r2, #1
 80036e4:	3a01      	subs	r2, #1
 80036e6:	0652      	lsls	r2, r2, #25
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4916      	ldr	r1, [pc, #88]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036f0:	4b14      	ldr	r3, [pc, #80]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fdf4 	bl	80012e8 <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003702:	e009      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003704:	f7fd fdf0 	bl	80012e8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
          break;
 8003716:	e005      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	4904      	ldr	r1, [pc, #16]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000

08003748 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003756:	4b6a      	ldr	r3, [pc, #424]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003762:	4b67      	ldr	r3, [pc, #412]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0203 	and.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d10d      	bne.n	800378e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
       ||
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800377a:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
       ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d047      	beq.n	800381e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e044      	b.n	800381e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d018      	beq.n	80037ce <RCCEx_PLLSAI2_Config+0x86>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d825      	bhi.n	80037ec <RCCEx_PLLSAI2_Config+0xa4>
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d002      	beq.n	80037aa <RCCEx_PLLSAI2_Config+0x62>
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d009      	beq.n	80037bc <RCCEx_PLLSAI2_Config+0x74>
 80037a8:	e020      	b.n	80037ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037aa:	4b55      	ldr	r3, [pc, #340]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e01a      	b.n	80037f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037bc:	4b50      	ldr	r3, [pc, #320]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037cc:	e013      	b.n	80037f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037da:	4b49      	ldr	r3, [pc, #292]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ea:	e006      	b.n	80037fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e004      	b.n	80037fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003802:	4b3f      	ldr	r3, [pc, #252]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	430b      	orrs	r3, r1
 8003818:	4939      	ldr	r1, [pc, #228]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d167      	bne.n	80038f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003824:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a35      	ldr	r2, [pc, #212]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800382e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fd fd5a 	bl	80012e8 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003838:	f7fd fd56 	bl	80012e8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
        break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800384c:	4b2c      	ldr	r3, [pc, #176]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d14a      	bne.n	80038f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003864:	4b26      	ldr	r3, [pc, #152]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800386c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	0912      	lsrs	r2, r2, #4
 800387c:	0452      	lsls	r2, r2, #17
 800387e:	430a      	orrs	r2, r1
 8003880:	491f      	ldr	r1, [pc, #124]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	614b      	str	r3, [r1, #20]
 8003886:	e011      	b.n	80038ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003888:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003890:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6892      	ldr	r2, [r2, #8]
 8003898:	0211      	lsls	r1, r2, #8
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6912      	ldr	r2, [r2, #16]
 800389e:	0852      	lsrs	r2, r2, #1
 80038a0:	3a01      	subs	r2, #1
 80038a2:	0652      	lsls	r2, r2, #25
 80038a4:	430a      	orrs	r2, r1
 80038a6:	4916      	ldr	r1, [pc, #88]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038ac:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a13      	ldr	r2, [pc, #76]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7fd fd16 	bl	80012e8 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038be:	e009      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038c0:	f7fd fd12 	bl	80012e8 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d902      	bls.n	80038d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	73fb      	strb	r3, [r7, #15]
          break;
 80038d2:	e005      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ef      	beq.n	80038c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038e6:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	4904      	ldr	r1, [pc, #16]	@ (8003900 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000

08003904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e095      	b.n	8003a42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003926:	d009      	beq.n	800393c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	e005      	b.n	800393c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd fa66 	bl	8000e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003972:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800397c:	d902      	bls.n	8003984 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e002      	b.n	800398a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003984:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003988:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003992:	d007      	beq.n	80039a4 <HAL_SPI_Init+0xa0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	ea42 0103 	orr.w	r1, r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	f003 0204 	and.w	r2, r3, #4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003a20:	ea42 0103 	orr.w	r1, r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b088      	sub	sp, #32
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a5a:	f7fd fc45 	bl	80012e8 <HAL_GetTick>
 8003a5e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
 8003a72:	e15c      	b.n	8003d2e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_SPI_Transmit+0x36>
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e154      	b.n	8003d2e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_SPI_Transmit+0x48>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e14d      	b.n	8003d2e <HAL_SPI_Transmit+0x2e4>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae4:	d10f      	bne.n	8003b06 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b10:	2b40      	cmp	r3, #64	@ 0x40
 8003b12:	d007      	beq.n	8003b24 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b2c:	d952      	bls.n	8003bd4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Transmit+0xf2>
 8003b36:	8b7b      	ldrh	r3, [r7, #26]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d145      	bne.n	8003bc8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b60:	e032      	b.n	8003bc8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d112      	bne.n	8003b96 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b94:	e018      	b.n	8003bc8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b96:	f7fd fba7 	bl	80012e8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d803      	bhi.n	8003bae <HAL_SPI_Transmit+0x164>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d102      	bne.n	8003bb4 <HAL_SPI_Transmit+0x16a>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0b2      	b.n	8003d2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1c7      	bne.n	8003b62 <HAL_SPI_Transmit+0x118>
 8003bd2:	e083      	b.n	8003cdc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_SPI_Transmit+0x198>
 8003bdc:	8b7b      	ldrh	r3, [r7, #26]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d177      	bne.n	8003cd2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d912      	bls.n	8003c12 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	881a      	ldrh	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	1c9a      	adds	r2, r3, #2
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b02      	subs	r3, #2
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c10:	e05f      	b.n	8003cd2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c38:	e04b      	b.n	8003cd2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d12b      	bne.n	8003ca0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d912      	bls.n	8003c78 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	881a      	ldrh	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c62:	1c9a      	adds	r2, r3, #2
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b02      	subs	r3, #2
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c76:	e02c      	b.n	8003cd2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	7812      	ldrb	r2, [r2, #0]
 8003c84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c9e:	e018      	b.n	8003cd2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca0:	f7fd fb22 	bl	80012e8 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d803      	bhi.n	8003cb8 <HAL_SPI_Transmit+0x26e>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Transmit+0x274>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e02d      	b.n	8003d2e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ae      	bne.n	8003c3a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f947 	bl	8003f74 <SPI_EndRxTxTransaction>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	4613      	mov	r3, r2
 8003d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d48:	f7fd face 	bl	80012e8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d58:	f7fd fac6 	bl	80012e8 <HAL_GetTick>
 8003d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	0d1b      	lsrs	r3, r3, #20
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	fb02 f303 	mul.w	r3, r2, r3
 8003d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d6e:	e054      	b.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d050      	beq.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d78:	f7fd fab6 	bl	80012e8 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d902      	bls.n	8003d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d13d      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003da6:	d111      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db0:	d004      	beq.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d107      	bne.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd4:	d10f      	bne.n	8003df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e017      	b.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d19b      	bne.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000000 	.word	0x20000000

08003e48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e5a:	f7fd fa45 	bl	80012e8 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	4413      	add	r3, r2
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e6a:	f7fd fa3d 	bl	80012e8 <HAL_GetTick>
 8003e6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e78:	4b3d      	ldr	r3, [pc, #244]	@ (8003f70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00da      	lsls	r2, r3, #3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	0d1b      	lsrs	r3, r3, #20
 8003e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e90:	e060      	b.n	8003f54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e98:	d107      	bne.n	8003eaa <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d050      	beq.n	8003f54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eb2:	f7fd fa19 	bl	80012e8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d902      	bls.n	8003ec8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d13d      	bne.n	8003f44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ed6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee0:	d111      	bne.n	8003f06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eea:	d004      	beq.n	8003ef6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef4:	d107      	bne.n	8003f06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0e:	d10f      	bne.n	8003f30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e010      	b.n	8003f66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d196      	bne.n	8003e92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3728      	adds	r7, #40	@ 0x28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000

08003f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff ff5b 	bl	8003e48 <SPI_WaitFifoStateUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e027      	b.n	8003ff8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2180      	movs	r1, #128	@ 0x80
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fec0 	bl	8003d38 <SPI_WaitFlagStateUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e014      	b.n	8003ff8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ff34 	bl	8003e48 <SPI_WaitFifoStateUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e000      	b.n	8003ff8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e049      	b.n	80040a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd f846 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f000 fa4c 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d001      	beq.n	80040c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e04f      	b.n	8004168 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <HAL_TIM_Base_Start_IT+0xc4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01d      	beq.n	8004126 <HAL_TIM_Base_Start_IT+0x76>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f2:	d018      	beq.n	8004126 <HAL_TIM_Base_Start_IT+0x76>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004178 <HAL_TIM_Base_Start_IT+0xc8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_TIM_Base_Start_IT+0x76>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1e      	ldr	r2, [pc, #120]	@ (800417c <HAL_TIM_Base_Start_IT+0xcc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_TIM_Base_Start_IT+0x76>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <HAL_TIM_Base_Start_IT+0xd0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_TIM_Base_Start_IT+0x76>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <HAL_TIM_Base_Start_IT+0xd4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_TIM_Base_Start_IT+0x76>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a19      	ldr	r2, [pc, #100]	@ (8004188 <HAL_TIM_Base_Start_IT+0xd8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d115      	bne.n	8004152 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	4b17      	ldr	r3, [pc, #92]	@ (800418c <HAL_TIM_Base_Start_IT+0xdc>)
 800412e:	4013      	ands	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b06      	cmp	r3, #6
 8004136:	d015      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0xb4>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413e:	d011      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004150:	e008      	b.n	8004164 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e000      	b.n	8004166 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004164:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40013400 	.word	0x40013400
 8004188:	40014000 	.word	0x40014000
 800418c:	00010007 	.word	0x00010007

08004190 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e049      	b.n	8004236 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f841 	bl	800423e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 f984 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800426a:	2b01      	cmp	r3, #1
 800426c:	d101      	bne.n	8004272 <HAL_TIM_OC_ConfigChannel+0x1e>
 800426e:	2302      	movs	r3, #2
 8004270:	e066      	b.n	8004340 <HAL_TIM_OC_ConfigChannel+0xec>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b14      	cmp	r3, #20
 800427e:	d857      	bhi.n	8004330 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004280:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042dd 	.word	0x080042dd
 800428c:	08004331 	.word	0x08004331
 8004290:	08004331 	.word	0x08004331
 8004294:	08004331 	.word	0x08004331
 8004298:	080042eb 	.word	0x080042eb
 800429c:	08004331 	.word	0x08004331
 80042a0:	08004331 	.word	0x08004331
 80042a4:	08004331 	.word	0x08004331
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	08004331 	.word	0x08004331
 80042b0:	08004331 	.word	0x08004331
 80042b4:	08004331 	.word	0x08004331
 80042b8:	08004307 	.word	0x08004307
 80042bc:	08004331 	.word	0x08004331
 80042c0:	08004331 	.word	0x08004331
 80042c4:	08004331 	.word	0x08004331
 80042c8:	08004315 	.word	0x08004315
 80042cc:	08004331 	.word	0x08004331
 80042d0:	08004331 	.word	0x08004331
 80042d4:	08004331 	.word	0x08004331
 80042d8:	08004323 	.word	0x08004323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f9a0 	bl	8004628 <TIM_OC1_SetConfig>
      break;
 80042e8:	e025      	b.n	8004336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fa29 	bl	8004748 <TIM_OC2_SetConfig>
      break;
 80042f6:	e01e      	b.n	8004336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 faac 	bl	800485c <TIM_OC3_SetConfig>
      break;
 8004304:	e017      	b.n	8004336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fb2d 	bl	800496c <TIM_OC4_SetConfig>
      break;
 8004312:	e010      	b.n	8004336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fb90 	bl	8004a40 <TIM_OC5_SetConfig>
      break;
 8004320:	e009      	b.n	8004336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fbed 	bl	8004b08 <TIM_OC6_SetConfig>
      break;
 800432e:	e002      	b.n	8004336 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	75fb      	strb	r3, [r7, #23]
      break;
 8004334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIM_ConfigClockSource+0x1c>
 8004360:	2302      	movs	r3, #2
 8004362:	e0b6      	b.n	80044d2 <HAL_TIM_ConfigClockSource+0x18a>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004382:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800438e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a0:	d03e      	beq.n	8004420 <HAL_TIM_ConfigClockSource+0xd8>
 80043a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a6:	f200 8087 	bhi.w	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	f000 8086 	beq.w	80044be <HAL_TIM_ConfigClockSource+0x176>
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043b6:	d87f      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043b8:	2b70      	cmp	r3, #112	@ 0x70
 80043ba:	d01a      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0xaa>
 80043bc:	2b70      	cmp	r3, #112	@ 0x70
 80043be:	d87b      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043c0:	2b60      	cmp	r3, #96	@ 0x60
 80043c2:	d050      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x11e>
 80043c4:	2b60      	cmp	r3, #96	@ 0x60
 80043c6:	d877      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	2b50      	cmp	r3, #80	@ 0x50
 80043ca:	d03c      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0xfe>
 80043cc:	2b50      	cmp	r3, #80	@ 0x50
 80043ce:	d873      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043d0:	2b40      	cmp	r3, #64	@ 0x40
 80043d2:	d058      	beq.n	8004486 <HAL_TIM_ConfigClockSource+0x13e>
 80043d4:	2b40      	cmp	r3, #64	@ 0x40
 80043d6:	d86f      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043d8:	2b30      	cmp	r3, #48	@ 0x30
 80043da:	d064      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
 80043dc:	2b30      	cmp	r3, #48	@ 0x30
 80043de:	d86b      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d060      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d867      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d05c      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d05a      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x15e>
 80043f0:	e062      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004402:	f000 fc61 	bl	8004cc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	609a      	str	r2, [r3, #8]
      break;
 800441e:	e04f      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004430:	f000 fc4a 	bl	8004cc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004442:	609a      	str	r2, [r3, #8]
      break;
 8004444:	e03c      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	461a      	mov	r2, r3
 8004454:	f000 fbbe 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2150      	movs	r1, #80	@ 0x50
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fc17 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004464:	e02c      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004472:	461a      	mov	r2, r3
 8004474:	f000 fbdd 	bl	8004c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2160      	movs	r1, #96	@ 0x60
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fc07 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004484:	e01c      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004492:	461a      	mov	r2, r3
 8004494:	f000 fb9e 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2140      	movs	r1, #64	@ 0x40
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fbf7 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 80044a4:	e00c      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f000 fbee 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 80044b6:	e003      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      break;
 80044bc:	e000      	b.n	80044c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a46      	ldr	r2, [pc, #280]	@ (8004608 <TIM_Base_SetConfig+0x12c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a43      	ldr	r2, [pc, #268]	@ (800460c <TIM_Base_SetConfig+0x130>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a42      	ldr	r2, [pc, #264]	@ (8004610 <TIM_Base_SetConfig+0x134>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a41      	ldr	r2, [pc, #260]	@ (8004614 <TIM_Base_SetConfig+0x138>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a40      	ldr	r2, [pc, #256]	@ (8004618 <TIM_Base_SetConfig+0x13c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a35      	ldr	r2, [pc, #212]	@ (8004608 <TIM_Base_SetConfig+0x12c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a32      	ldr	r2, [pc, #200]	@ (800460c <TIM_Base_SetConfig+0x130>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a31      	ldr	r2, [pc, #196]	@ (8004610 <TIM_Base_SetConfig+0x134>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a30      	ldr	r2, [pc, #192]	@ (8004614 <TIM_Base_SetConfig+0x138>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2f      	ldr	r2, [pc, #188]	@ (8004618 <TIM_Base_SetConfig+0x13c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2e      	ldr	r2, [pc, #184]	@ (800461c <TIM_Base_SetConfig+0x140>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a2d      	ldr	r2, [pc, #180]	@ (8004620 <TIM_Base_SetConfig+0x144>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a2c      	ldr	r2, [pc, #176]	@ (8004624 <TIM_Base_SetConfig+0x148>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a16      	ldr	r2, [pc, #88]	@ (8004608 <TIM_Base_SetConfig+0x12c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a18      	ldr	r2, [pc, #96]	@ (8004618 <TIM_Base_SetConfig+0x13c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a17      	ldr	r2, [pc, #92]	@ (800461c <TIM_Base_SetConfig+0x140>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a16      	ldr	r2, [pc, #88]	@ (8004620 <TIM_Base_SetConfig+0x144>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <TIM_Base_SetConfig+0x148>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f023 0201 	bic.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	611a      	str	r2, [r3, #16]
  }
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40013400 	.word	0x40013400
 800461c:	40014000 	.word	0x40014000
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800

08004628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f023 0201 	bic.w	r2, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 0302 	bic.w	r3, r3, #2
 8004674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a2c      	ldr	r2, [pc, #176]	@ (8004734 <TIM_OC1_SetConfig+0x10c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00f      	beq.n	80046a8 <TIM_OC1_SetConfig+0x80>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a2b      	ldr	r2, [pc, #172]	@ (8004738 <TIM_OC1_SetConfig+0x110>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_OC1_SetConfig+0x80>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a2a      	ldr	r2, [pc, #168]	@ (800473c <TIM_OC1_SetConfig+0x114>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_OC1_SetConfig+0x80>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a29      	ldr	r2, [pc, #164]	@ (8004740 <TIM_OC1_SetConfig+0x118>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_OC1_SetConfig+0x80>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a28      	ldr	r2, [pc, #160]	@ (8004744 <TIM_OC1_SetConfig+0x11c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d10c      	bne.n	80046c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0308 	bic.w	r3, r3, #8
 80046ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <TIM_OC1_SetConfig+0x10c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00f      	beq.n	80046ea <TIM_OC1_SetConfig+0xc2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004738 <TIM_OC1_SetConfig+0x110>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <TIM_OC1_SetConfig+0xc2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a19      	ldr	r2, [pc, #100]	@ (800473c <TIM_OC1_SetConfig+0x114>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <TIM_OC1_SetConfig+0xc2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <TIM_OC1_SetConfig+0x118>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_OC1_SetConfig+0xc2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a17      	ldr	r2, [pc, #92]	@ (8004744 <TIM_OC1_SetConfig+0x11c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d111      	bne.n	800470e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	621a      	str	r2, [r3, #32]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	40012c00 	.word	0x40012c00
 8004738:	40013400 	.word	0x40013400
 800473c:	40014000 	.word	0x40014000
 8004740:	40014400 	.word	0x40014400
 8004744:	40014800 	.word	0x40014800

08004748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 0210 	bic.w	r2, r3, #16
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800477a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0320 	bic.w	r3, r3, #32
 8004796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a28      	ldr	r2, [pc, #160]	@ (8004848 <TIM_OC2_SetConfig+0x100>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d003      	beq.n	80047b4 <TIM_OC2_SetConfig+0x6c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a27      	ldr	r2, [pc, #156]	@ (800484c <TIM_OC2_SetConfig+0x104>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10d      	bne.n	80047d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004848 <TIM_OC2_SetConfig+0x100>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00f      	beq.n	80047f8 <TIM_OC2_SetConfig+0xb0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <TIM_OC2_SetConfig+0x104>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_OC2_SetConfig+0xb0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004850 <TIM_OC2_SetConfig+0x108>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_OC2_SetConfig+0xb0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004854 <TIM_OC2_SetConfig+0x10c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC2_SetConfig+0xb0>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a19      	ldr	r2, [pc, #100]	@ (8004858 <TIM_OC2_SetConfig+0x110>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d113      	bne.n	8004820 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40013400 	.word	0x40013400
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800

0800485c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0303 	bic.w	r3, r3, #3
 8004896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a27      	ldr	r2, [pc, #156]	@ (8004958 <TIM_OC3_SetConfig+0xfc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_OC3_SetConfig+0x6a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a26      	ldr	r2, [pc, #152]	@ (800495c <TIM_OC3_SetConfig+0x100>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10d      	bne.n	80048e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004958 <TIM_OC3_SetConfig+0xfc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00f      	beq.n	800490a <TIM_OC3_SetConfig+0xae>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1b      	ldr	r2, [pc, #108]	@ (800495c <TIM_OC3_SetConfig+0x100>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00b      	beq.n	800490a <TIM_OC3_SetConfig+0xae>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004960 <TIM_OC3_SetConfig+0x104>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <TIM_OC3_SetConfig+0xae>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a19      	ldr	r2, [pc, #100]	@ (8004964 <TIM_OC3_SetConfig+0x108>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <TIM_OC3_SetConfig+0xae>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a18      	ldr	r2, [pc, #96]	@ (8004968 <TIM_OC3_SetConfig+0x10c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d113      	bne.n	8004932 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40013400 	.word	0x40013400
 8004960:	40014000 	.word	0x40014000
 8004964:	40014400 	.word	0x40014400
 8004968:	40014800 	.word	0x40014800

0800496c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800499a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	031b      	lsls	r3, r3, #12
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a18      	ldr	r2, [pc, #96]	@ (8004a2c <TIM_OC4_SetConfig+0xc0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_OC4_SetConfig+0x84>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <TIM_OC4_SetConfig+0xc4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_OC4_SetConfig+0x84>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a16      	ldr	r2, [pc, #88]	@ (8004a34 <TIM_OC4_SetConfig+0xc8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_OC4_SetConfig+0x84>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a15      	ldr	r2, [pc, #84]	@ (8004a38 <TIM_OC4_SetConfig+0xcc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC4_SetConfig+0x84>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a14      	ldr	r2, [pc, #80]	@ (8004a3c <TIM_OC4_SetConfig+0xd0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d109      	bne.n	8004a04 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	019b      	lsls	r3, r3, #6
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40013400 	.word	0x40013400
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40014400 	.word	0x40014400
 8004a3c:	40014800 	.word	0x40014800

08004a40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a17      	ldr	r2, [pc, #92]	@ (8004af4 <TIM_OC5_SetConfig+0xb4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_OC5_SetConfig+0x7a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	@ (8004af8 <TIM_OC5_SetConfig+0xb8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_OC5_SetConfig+0x7a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	@ (8004afc <TIM_OC5_SetConfig+0xbc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_OC5_SetConfig+0x7a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a14      	ldr	r2, [pc, #80]	@ (8004b00 <TIM_OC5_SetConfig+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC5_SetConfig+0x7a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	@ (8004b04 <TIM_OC5_SetConfig+0xc4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d109      	bne.n	8004ace <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012c00 	.word	0x40012c00
 8004af8:	40013400 	.word	0x40013400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	051b      	lsls	r3, r3, #20
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <TIM_OC6_SetConfig+0xb8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_OC6_SetConfig+0x7c>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <TIM_OC6_SetConfig+0xbc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_OC6_SetConfig+0x7c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a16      	ldr	r2, [pc, #88]	@ (8004bc8 <TIM_OC6_SetConfig+0xc0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_OC6_SetConfig+0x7c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <TIM_OC6_SetConfig+0xc4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC6_SetConfig+0x7c>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a14      	ldr	r2, [pc, #80]	@ (8004bd0 <TIM_OC6_SetConfig+0xc8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d109      	bne.n	8004b98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	029b      	lsls	r3, r3, #10
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40012c00 	.word	0x40012c00
 8004bc4:	40013400 	.word	0x40013400
 8004bc8:	40014000 	.word	0x40014000
 8004bcc:	40014400 	.word	0x40014400
 8004bd0:	40014800 	.word	0x40014800

08004bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 030a 	bic.w	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b087      	sub	sp, #28
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f023 0210 	bic.w	r2, r3, #16
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	031b      	lsls	r3, r3, #12
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	621a      	str	r2, [r3, #32]
}
 8004c86:	bf00      	nop
 8004c88:	371c      	adds	r7, #28
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f043 0307 	orr.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e068      	b.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2e      	ldr	r2, [pc, #184]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1e      	ldr	r2, [pc, #120]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01d      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d92:	d018      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1b      	ldr	r2, [pc, #108]	@ (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1a      	ldr	r2, [pc, #104]	@ (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a18      	ldr	r2, [pc, #96]	@ (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a13      	ldr	r2, [pc, #76]	@ (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a14      	ldr	r2, [pc, #80]	@ (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10c      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40013400 	.word	0x40013400
 8004e08:	40000400 	.word	0x40000400
 8004e0c:	40000800 	.word	0x40000800
 8004e10:	40000c00 	.word	0x40000c00
 8004e14:	40014000 	.word	0x40014000

08004e18 <memset>:
 8004e18:	4402      	add	r2, r0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <memset+0xa>
 8004e20:	4770      	bx	lr
 8004e22:	f803 1b01 	strb.w	r1, [r3], #1
 8004e26:	e7f9      	b.n	8004e1c <memset+0x4>

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	@ (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	2000000c 	.word	0x2000000c

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	@ (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	@ (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	@ (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	@ (8004e78 <__libc_init_array+0x44>)
 8004e48:	f000 f9b8 	bl	80051bc <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08005218 	.word	0x08005218
 8004e70:	08005218 	.word	0x08005218
 8004e74:	08005218 	.word	0x08005218
 8004e78:	0800521c 	.word	0x0800521c

08004e7c <log10f>:
 8004e7c:	b508      	push	{r3, lr}
 8004e7e:	ed2d 8b02 	vpush	{d8}
 8004e82:	eeb0 8a40 	vmov.f32	s16, s0
 8004e86:	f000 f84f 	bl	8004f28 <__ieee754_log10f>
 8004e8a:	eeb4 8a48 	vcmp.f32	s16, s16
 8004e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e92:	d60f      	bvs.n	8004eb4 <log10f+0x38>
 8004e94:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9c:	d80a      	bhi.n	8004eb4 <log10f+0x38>
 8004e9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	d108      	bne.n	8004eba <log10f+0x3e>
 8004ea8:	f7ff ffbe 	bl	8004e28 <__errno>
 8004eac:	2322      	movs	r3, #34	@ 0x22
 8004eae:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8004ed0 <log10f+0x54>
 8004eb2:	6003      	str	r3, [r0, #0]
 8004eb4:	ecbd 8b02 	vpop	{d8}
 8004eb8:	bd08      	pop	{r3, pc}
 8004eba:	f7ff ffb5 	bl	8004e28 <__errno>
 8004ebe:	ecbd 8b02 	vpop	{d8}
 8004ec2:	2321      	movs	r3, #33	@ 0x21
 8004ec4:	6003      	str	r3, [r0, #0]
 8004ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004eca:	4802      	ldr	r0, [pc, #8]	@ (8004ed4 <log10f+0x58>)
 8004ecc:	f000 b822 	b.w	8004f14 <nanf>
 8004ed0:	ff800000 	.word	0xff800000
 8004ed4:	08005214 	.word	0x08005214

08004ed8 <sqrtf>:
 8004ed8:	b508      	push	{r3, lr}
 8004eda:	ed2d 8b02 	vpush	{d8}
 8004ede:	eeb0 8a40 	vmov.f32	s16, s0
 8004ee2:	f000 f81d 	bl	8004f20 <__ieee754_sqrtf>
 8004ee6:	eeb4 8a48 	vcmp.f32	s16, s16
 8004eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eee:	d60c      	bvs.n	8004f0a <sqrtf+0x32>
 8004ef0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8004f10 <sqrtf+0x38>
 8004ef4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efc:	d505      	bpl.n	8004f0a <sqrtf+0x32>
 8004efe:	f7ff ff93 	bl	8004e28 <__errno>
 8004f02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004f06:	2321      	movs	r3, #33	@ 0x21
 8004f08:	6003      	str	r3, [r0, #0]
 8004f0a:	ecbd 8b02 	vpop	{d8}
 8004f0e:	bd08      	pop	{r3, pc}
 8004f10:	00000000 	.word	0x00000000

08004f14 <nanf>:
 8004f14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004f1c <nanf+0x8>
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	7fc00000 	.word	0x7fc00000

08004f20 <__ieee754_sqrtf>:
 8004f20:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004f24:	4770      	bx	lr
	...

08004f28 <__ieee754_log10f>:
 8004f28:	b508      	push	{r3, lr}
 8004f2a:	ee10 3a10 	vmov	r3, s0
 8004f2e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004f32:	ed2d 8b02 	vpush	{d8}
 8004f36:	d108      	bne.n	8004f4a <__ieee754_log10f+0x22>
 8004f38:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004fc0 <__ieee754_log10f+0x98>
 8004f3c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8004fc4 <__ieee754_log10f+0x9c>
 8004f40:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004f44:	ecbd 8b02 	vpop	{d8}
 8004f48:	bd08      	pop	{r3, pc}
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	da02      	bge.n	8004f56 <__ieee754_log10f+0x2e>
 8004f50:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004f54:	e7f2      	b.n	8004f3c <__ieee754_log10f+0x14>
 8004f56:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004f5a:	db02      	blt.n	8004f62 <__ieee754_log10f+0x3a>
 8004f5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004f60:	e7f0      	b.n	8004f44 <__ieee754_log10f+0x1c>
 8004f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f66:	bfbf      	itttt	lt
 8004f68:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8004fc8 <__ieee754_log10f+0xa0>
 8004f6c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004f70:	f06f 0118 	mvnlt.w	r1, #24
 8004f74:	ee17 2a90 	vmovlt	r2, s15
 8004f78:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8004f7c:	bfa8      	it	ge
 8004f7e:	2100      	movge	r1, #0
 8004f80:	3b7f      	subs	r3, #127	@ 0x7f
 8004f82:	440b      	add	r3, r1
 8004f84:	0fd9      	lsrs	r1, r3, #31
 8004f86:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8004f92:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8004f96:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8004f9a:	ee00 3a10 	vmov	s0, r3
 8004f9e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004fa2:	f000 f819 	bl	8004fd8 <__ieee754_logf>
 8004fa6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8004fcc <__ieee754_log10f+0xa4>
 8004faa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004fae:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8004fd0 <__ieee754_log10f+0xa8>
 8004fb2:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004fb6:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8004fd4 <__ieee754_log10f+0xac>
 8004fba:	eea8 0a27 	vfma.f32	s0, s16, s15
 8004fbe:	e7c1      	b.n	8004f44 <__ieee754_log10f+0x1c>
 8004fc0:	cc000000 	.word	0xcc000000
 8004fc4:	00000000 	.word	0x00000000
 8004fc8:	4c000000 	.word	0x4c000000
 8004fcc:	3ede5bd9 	.word	0x3ede5bd9
 8004fd0:	355427db 	.word	0x355427db
 8004fd4:	3e9a2080 	.word	0x3e9a2080

08004fd8 <__ieee754_logf>:
 8004fd8:	ee10 3a10 	vmov	r3, s0
 8004fdc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004fe0:	d106      	bne.n	8004ff0 <__ieee754_logf+0x18>
 8004fe2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800517c <__ieee754_logf+0x1a4>
 8004fe6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8005180 <__ieee754_logf+0x1a8>
 8004fea:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8004fee:	4770      	bx	lr
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	da02      	bge.n	8004ffc <__ieee754_logf+0x24>
 8004ff6:	ee30 7a40 	vsub.f32	s14, s0, s0
 8004ffa:	e7f4      	b.n	8004fe6 <__ieee754_logf+0xe>
 8004ffc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005000:	db02      	blt.n	8005008 <__ieee754_logf+0x30>
 8005002:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005006:	4770      	bx	lr
 8005008:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800500c:	bfb8      	it	lt
 800500e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8005184 <__ieee754_logf+0x1ac>
 8005012:	485d      	ldr	r0, [pc, #372]	@ (8005188 <__ieee754_logf+0x1b0>)
 8005014:	bfbe      	ittt	lt
 8005016:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800501a:	f06f 0118 	mvnlt.w	r1, #24
 800501e:	ee17 2a90 	vmovlt	r2, s15
 8005022:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005026:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800502a:	4410      	add	r0, r2
 800502c:	bfa8      	it	ge
 800502e:	2100      	movge	r1, #0
 8005030:	3b7f      	subs	r3, #127	@ 0x7f
 8005032:	440b      	add	r3, r1
 8005034:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8005038:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800503c:	4311      	orrs	r1, r2
 800503e:	ee00 1a10 	vmov	s0, r1
 8005042:	4952      	ldr	r1, [pc, #328]	@ (800518c <__ieee754_logf+0x1b4>)
 8005044:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8005048:	f102 000f 	add.w	r0, r2, #15
 800504c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005050:	4001      	ands	r1, r0
 8005052:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005056:	bb89      	cbnz	r1, 80050bc <__ieee754_logf+0xe4>
 8005058:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	d10f      	bne.n	8005082 <__ieee754_logf+0xaa>
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8087 	beq.w	8005176 <__ieee754_logf+0x19e>
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8005190 <__ieee754_logf+0x1b8>
 8005070:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8005194 <__ieee754_logf+0x1bc>
 8005074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005078:	ee27 0a80 	vmul.f32	s0, s15, s0
 800507c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8005080:	4770      	bx	lr
 8005082:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8005198 <__ieee754_logf+0x1c0>
 8005086:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800508a:	eee0 7a66 	vfms.f32	s15, s0, s13
 800508e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005096:	b913      	cbnz	r3, 800509e <__ieee754_logf+0xc6>
 8005098:	ee30 0a47 	vsub.f32	s0, s0, s14
 800509c:	4770      	bx	lr
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005190 <__ieee754_logf+0x1b8>
 80050a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050aa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80050ae:	ee37 0a40 	vsub.f32	s0, s14, s0
 80050b2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005194 <__ieee754_logf+0x1bc>
 80050b6:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80050ba:	4770      	bx	lr
 80050bc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80050c0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80050c4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800519c <__ieee754_logf+0x1c4>
 80050c8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80051a0 <__ieee754_logf+0x1c8>
 80050cc:	4935      	ldr	r1, [pc, #212]	@ (80051a4 <__ieee754_logf+0x1cc>)
 80050ce:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80050d2:	4411      	add	r1, r2
 80050d4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80050d8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80050dc:	430a      	orrs	r2, r1
 80050de:	2a00      	cmp	r2, #0
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	ee26 5a06 	vmul.f32	s10, s12, s12
 80050e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050ec:	ee25 7a05 	vmul.f32	s14, s10, s10
 80050f0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80051a8 <__ieee754_logf+0x1d0>
 80050f4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80050f8:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80051ac <__ieee754_logf+0x1d4>
 80050fc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005100:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80051b0 <__ieee754_logf+0x1d8>
 8005104:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005108:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80051b4 <__ieee754_logf+0x1dc>
 800510c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8005110:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80051b8 <__ieee754_logf+0x1e0>
 8005114:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005118:	ee67 7a85 	vmul.f32	s15, s15, s10
 800511c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8005120:	dd1a      	ble.n	8005158 <__ieee754_logf+0x180>
 8005122:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005126:	ee20 7a07 	vmul.f32	s14, s0, s14
 800512a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800512e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005132:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005136:	b913      	cbnz	r3, 800513e <__ieee754_logf+0x166>
 8005138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800513c:	e7ac      	b.n	8005098 <__ieee754_logf+0xc0>
 800513e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8005190 <__ieee754_logf+0x1b8>
 8005142:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800514a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800514e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005194 <__ieee754_logf+0x1bc>
 8005152:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8005156:	4770      	bx	lr
 8005158:	ee70 7a67 	vsub.f32	s15, s0, s15
 800515c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005160:	b913      	cbnz	r3, 8005168 <__ieee754_logf+0x190>
 8005162:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005166:	4770      	bx	lr
 8005168:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005190 <__ieee754_logf+0x1b8>
 800516c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8005170:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005174:	e7eb      	b.n	800514e <__ieee754_logf+0x176>
 8005176:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8005180 <__ieee754_logf+0x1a8>
 800517a:	4770      	bx	lr
 800517c:	cc000000 	.word	0xcc000000
 8005180:	00000000 	.word	0x00000000
 8005184:	4c000000 	.word	0x4c000000
 8005188:	004afb20 	.word	0x004afb20
 800518c:	007ffff0 	.word	0x007ffff0
 8005190:	3717f7d1 	.word	0x3717f7d1
 8005194:	3f317180 	.word	0x3f317180
 8005198:	3eaaaaab 	.word	0x3eaaaaab
 800519c:	3e1cd04f 	.word	0x3e1cd04f
 80051a0:	3e178897 	.word	0x3e178897
 80051a4:	ffcf5c30 	.word	0xffcf5c30
 80051a8:	3e638e29 	.word	0x3e638e29
 80051ac:	3ecccccd 	.word	0x3ecccccd
 80051b0:	3e3a3325 	.word	0x3e3a3325
 80051b4:	3e924925 	.word	0x3e924925
 80051b8:	3f2aaaab 	.word	0x3f2aaaab

080051bc <_init>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr

080051c8 <_fini>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr
