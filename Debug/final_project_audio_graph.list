
final_project_audio_graph.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080045a0  080045a0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045a0  080045a0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080045a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000000c  080045b4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  080045b4  00006624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ffd  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e8  00000000  00000000  00017039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  00019928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d91  00000000  00000000  0001aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026fee  00000000  00000000  0001b859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001499b  00000000  00000000  00042847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0d49  00000000  00000000  000571e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147f2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  00147f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004548 	.word	0x08004548

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004548 	.word	0x08004548

080001c8 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80001cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001ce:	4a2d      	ldr	r2, [pc, #180]	@ (8000284 <MX_DFSDM1_Init+0xbc>)
 80001d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80001d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 80001d8:	4b29      	ldr	r3, [pc, #164]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001da:	2200      	movs	r2, #0
 80001dc:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80001de:	4b28      	ldr	r3, [pc, #160]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80001e4:	4b26      	ldr	r3, [pc, #152]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001e6:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80001ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 80001ec:	4b24      	ldr	r3, [pc, #144]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 64;
 80001f2:	4b23      	ldr	r3, [pc, #140]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001f4:	2240      	movs	r2, #64	@ 0x40
 80001f6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80001f8:	4821      	ldr	r0, [pc, #132]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 80001fa:	f000 ff29 	bl	8001050 <HAL_DFSDM_FilterInit>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000204:	f000 fa7a 	bl	80006fc <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000208:	4b1f      	ldr	r3, [pc, #124]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 800020a:	4a20      	ldr	r2, [pc, #128]	@ (800028c <MX_DFSDM1_Init+0xc4>)
 800020c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800020e:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000210:	2200      	movs	r2, #0
 8000212:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000214:	4b1c      	ldr	r3, [pc, #112]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000216:	2200      	movs	r2, #0
 8000218:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800021a:	4b1b      	ldr	r3, [pc, #108]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 800021c:	2202      	movs	r2, #2
 800021e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000220:	4b19      	ldr	r3, [pc, #100]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000222:	2200      	movs	r2, #0
 8000224:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000226:	4b18      	ldr	r3, [pc, #96]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000228:	2200      	movs	r2, #0
 800022a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800022c:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 800022e:	2200      	movs	r2, #0
 8000230:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000232:	4b15      	ldr	r3, [pc, #84]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000234:	2200      	movs	r2, #0
 8000236:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000238:	4b13      	ldr	r3, [pc, #76]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 800023a:	2200      	movs	r2, #0
 800023c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800023e:	4b12      	ldr	r3, [pc, #72]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000240:	2200      	movs	r2, #0
 8000242:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000244:	4b10      	ldr	r3, [pc, #64]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000246:	2201      	movs	r2, #1
 8000248:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800024a:	4b0f      	ldr	r3, [pc, #60]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 800024c:	2200      	movs	r2, #0
 800024e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000250:	4b0d      	ldr	r3, [pc, #52]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000252:	2200      	movs	r2, #0
 8000254:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000256:	480c      	ldr	r0, [pc, #48]	@ (8000288 <MX_DFSDM1_Init+0xc0>)
 8000258:	f000 fe26 	bl	8000ea8 <HAL_DFSDM_ChannelInit>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000262:	f000 fa4b 	bl	80006fc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000266:	2201      	movs	r2, #1
 8000268:	2101      	movs	r1, #1
 800026a:	4805      	ldr	r0, [pc, #20]	@ (8000280 <MX_DFSDM1_Init+0xb8>)
 800026c:	f000 ffca 	bl	8001204 <HAL_DFSDM_FilterConfigRegChannel>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000276:	f000 fa41 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028
 8000284:	40016100 	.word	0x40016100
 8000288:	2000007c 	.word	0x2000007c
 800028c:	40016000 	.word	0x40016000

08000290 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b0ac      	sub	sp, #176	@ 0xb0
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2288      	movs	r2, #136	@ 0x88
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f004 f91d 	bl	80044f0 <memset>
  if(DFSDM1_Init == 0)
 80002b6:	4b45      	ldr	r3, [pc, #276]	@ (80003cc <HAL_DFSDM_FilterMspInit+0x13c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80002be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 80002c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80002c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 fca3 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <HAL_DFSDM_FilterMspInit+0x50>
    {
      Error_Handler();
 80002dc:	f000 fa0e 	bl	80006fc <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80002e0:	4b3b      	ldr	r3, [pc, #236]	@ (80003d0 <HAL_DFSDM_FilterMspInit+0x140>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3301      	adds	r3, #1
 80002e6:	4a3a      	ldr	r2, [pc, #232]	@ (80003d0 <HAL_DFSDM_FilterMspInit+0x140>)
 80002e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80002ea:	4b39      	ldr	r3, [pc, #228]	@ (80003d0 <HAL_DFSDM_FilterMspInit+0x140>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b01      	cmp	r3, #1
 80002f0:	d10b      	bne.n	800030a <HAL_DFSDM_FilterMspInit+0x7a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80002f2:	4b38      	ldr	r3, [pc, #224]	@ (80003d4 <HAL_DFSDM_FilterMspInit+0x144>)
 80002f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002f6:	4a37      	ldr	r2, [pc, #220]	@ (80003d4 <HAL_DFSDM_FilterMspInit+0x144>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80002fe:	4b35      	ldr	r3, [pc, #212]	@ (80003d4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000302:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800030a:	4b32      	ldr	r3, [pc, #200]	@ (80003d4 <HAL_DFSDM_FilterMspInit+0x144>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	4a31      	ldr	r2, [pc, #196]	@ (80003d4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000316:	4b2f      	ldr	r3, [pc, #188]	@ (80003d4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PB2     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000322:	2306      	movs	r3, #6
 8000324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000328:	2302      	movs	r3, #2
 800032a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800033a:	2306      	movs	r3, #6
 800033c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000340:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000344:	4619      	mov	r1, r3
 8000346:	4824      	ldr	r0, [pc, #144]	@ (80003d8 <HAL_DFSDM_FilterMspInit+0x148>)
 8000348:	f001 fc7a 	bl	8001c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800034c:	4b1f      	ldr	r3, [pc, #124]	@ (80003cc <HAL_DFSDM_FilterMspInit+0x13c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	4a1e      	ldr	r2, [pc, #120]	@ (80003cc <HAL_DFSDM_FilterMspInit+0x13c>)
 8000354:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a20      	ldr	r2, [pc, #128]	@ (80003dc <HAL_DFSDM_FilterMspInit+0x14c>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d131      	bne.n	80003c4 <HAL_DFSDM_FilterMspInit+0x134>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000360:	4b1f      	ldr	r3, [pc, #124]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <HAL_DFSDM_FilterMspInit+0x154>)
 8000364:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 8000366:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036c:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000372:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000378:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 800037a:	2280      	movs	r2, #128	@ 0x80
 800037c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800037e:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000384:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000388:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800038c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800038e:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000390:	2200      	movs	r2, #0
 8000392:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000396:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800039a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800039c:	4810      	ldr	r0, [pc, #64]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 800039e:	f001 fa57 	bl	8001850 <HAL_DMA_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <HAL_DFSDM_FilterMspInit+0x11c>
    {
      Error_Handler();
 80003a8:	f000 f9a8 	bl	80006fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a0c      	ldr	r2, [pc, #48]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 80003b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003b2:	4a0b      	ldr	r2, [pc, #44]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a09      	ldr	r2, [pc, #36]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 80003bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80003be:	4a08      	ldr	r2, [pc, #32]	@ (80003e0 <HAL_DFSDM_FilterMspInit+0x150>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 80003c4:	bf00      	nop
 80003c6:	37b0      	adds	r7, #176	@ 0xb0
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000100 	.word	0x20000100
 80003d0:	200000fc 	.word	0x200000fc
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48000400 	.word	0x48000400
 80003dc:	40016100 	.word	0x40016100
 80003e0:	200000b4 	.word	0x200000b4
 80003e4:	40020044 	.word	0x40020044

080003e8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b0ac      	sub	sp, #176	@ 0xb0
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
 80003fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	2288      	movs	r2, #136	@ 0x88
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f004 f871 	bl	80044f0 <memset>
  if(DFSDM1_Init == 0)
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <HAL_DFSDM_ChannelMspInit+0xe0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d153      	bne.n	80004be <HAL_DFSDM_ChannelMspInit+0xd6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000416:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800041a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_SYSCLK;
 800041c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000420:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	4618      	mov	r0, r3
 800042a:	f002 fbf7 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <HAL_DFSDM_ChannelMspInit+0x50>
    {
      Error_Handler();
 8000434:	f000 f962 	bl	80006fc <Error_Handler>
    }

    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000438:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <HAL_DFSDM_ChannelMspInit+0xe4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	4a23      	ldr	r2, [pc, #140]	@ (80004cc <HAL_DFSDM_ChannelMspInit+0xe4>)
 8000440:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000442:	4b22      	ldr	r3, [pc, #136]	@ (80004cc <HAL_DFSDM_ChannelMspInit+0xe4>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d10b      	bne.n	8000462 <HAL_DFSDM_ChannelMspInit+0x7a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800044a:	4b21      	ldr	r3, [pc, #132]	@ (80004d0 <HAL_DFSDM_ChannelMspInit+0xe8>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800044e:	4a20      	ldr	r2, [pc, #128]	@ (80004d0 <HAL_DFSDM_ChannelMspInit+0xe8>)
 8000450:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000454:	6613      	str	r3, [r2, #96]	@ 0x60
 8000456:	4b1e      	ldr	r3, [pc, #120]	@ (80004d0 <HAL_DFSDM_ChannelMspInit+0xe8>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800045a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <HAL_DFSDM_ChannelMspInit+0xe8>)
 8000464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000466:	4a1a      	ldr	r2, [pc, #104]	@ (80004d0 <HAL_DFSDM_ChannelMspInit+0xe8>)
 8000468:	f043 0302 	orr.w	r3, r3, #2
 800046c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <HAL_DFSDM_ChannelMspInit+0xe8>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000472:	f003 0302 	and.w	r3, r3, #2
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PB1     ------> DFSDM1_DATIN0
    PB2     ------> DFSDM1_CKIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800047a:	2306      	movs	r3, #6
 800047c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000480:	2302      	movs	r3, #2
 8000482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000492:	2306      	movs	r3, #6
 8000494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000498:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800049c:	4619      	mov	r1, r3
 800049e:	480d      	ldr	r0, [pc, #52]	@ (80004d4 <HAL_DFSDM_ChannelMspInit+0xec>)
 80004a0:	f001 fbce 	bl	8001c40 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	203d      	movs	r0, #61	@ 0x3d
 80004aa:	f000 fcc6 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 80004ae:	203d      	movs	r0, #61	@ 0x3d
 80004b0:	f000 fcdf 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <HAL_DFSDM_ChannelMspInit+0xe0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	4a03      	ldr	r2, [pc, #12]	@ (80004c8 <HAL_DFSDM_ChannelMspInit+0xe0>)
 80004bc:	6013      	str	r3, [r2, #0]
  }
}
 80004be:	bf00      	nop
 80004c0:	37b0      	adds	r7, #176	@ 0xb0
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000100 	.word	0x20000100
 80004cc:	200000fc 	.word	0x200000fc
 80004d0:	40021000 	.word	0x40021000
 80004d4:	48000400 	.word	0x48000400

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <MX_DMA_Init+0x48>)
 80004e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000520 <MX_DMA_Init+0x48>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000520 <MX_DMA_Init+0x48>)
 80004ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200e      	movs	r0, #14
 80004fc:	f000 fc9d 	bl	8000e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000500:	200e      	movs	r0, #14
 8000502:	f000 fcb6 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2011      	movs	r0, #17
 800050c:	f000 fc95 	bl	8000e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000510:	2011      	movs	r0, #17
 8000512:	f000 fcae 	bl	8000e72 <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a28      	ldr	r2, [pc, #160]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a22      	ldr	r2, [pc, #136]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_GPIO_Init+0xbc>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2122      	movs	r1, #34	@ 0x22
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f001 fd03 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000594:	4813      	ldr	r0, [pc, #76]	@ (80005e4 <MX_GPIO_Init+0xc0>)
 8000596:	f001 fcfd 	bl	8001f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800059a:	2322      	movs	r3, #34	@ 0x22
 800059c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b4:	f001 fb44 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80005b8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80005bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <MX_GPIO_Init+0xc0>)
 80005d2:	f001 fb35 	bl	8001c40 <HAL_GPIO_Init>

}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400

080005e8 <HAL_DFSDM_FilterErrorCallback>:
  }
}

/* DMA Error Callback */
void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  Error_Handler();
 80005f0:	f000 f884 	bl	80006fc <Error_Handler>
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 faca 	bl	8000b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f827 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f7ff ff8b 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 800060e:	f7ff ff63 	bl	80004d8 <MX_DMA_Init>
  MX_TIM2_Init();
 8000612:	f000 f99d 	bl	8000950 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000616:	f7ff fdd7 	bl	80001c8 <MX_DFSDM1_Init>
  MX_SPI2_Init();
 800061a:	f000 f875 	bl	8000708 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef dfsdm_status = HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t*) dfdsdm_buffer,
 800061e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000622:	490a      	ldr	r1, [pc, #40]	@ (800064c <main+0x50>)
 8000624:	480a      	ldr	r0, [pc, #40]	@ (8000650 <main+0x54>)
 8000626:	f000 fe33 	bl	8001290 <HAL_DFSDM_FilterRegularStart_DMA>
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  AUDIO_BUFFER_SIZE);
  if (dfsdm_status != HAL_OK) {
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <main+0x3c>
    return 0;
 8000634:	2300      	movs	r3, #0
 8000636:	e004      	b.n	8000642 <main+0x46>
  }
  HAL_TIM_Base_Start_IT(&htim2);
 8000638:	4806      	ldr	r0, [pc, #24]	@ (8000654 <main+0x58>)
 800063a:	f003 f8a5 	bl	8003788 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <main+0x42>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000104 	.word	0x20000104
 8000650:	20000028 	.word	0x20000028
 8000654:	20000568 	.word	0x20000568

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	@ 0x58
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2244      	movs	r2, #68	@ 0x44
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 ff42 	bl	80044f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800067e:	f001 fcaf 	bl	8001fe0 <HAL_PWREx_ControlVoltageScaling>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000688:	f000 f838 	bl	80006fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800068c:	2310      	movs	r3, #16
 800068e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	@ 0x60
 800069a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a0:	2301      	movs	r3, #1
 80006a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006a8:	2328      	movs	r3, #40	@ 0x28
 80006aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fce5 	bl	800208c <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c8:	f000 f818 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2303      	movs	r3, #3
 80006d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2104      	movs	r1, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 f8ad 	bl	8002844 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f0:	f000 f804 	bl	80006fc <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3758      	adds	r7, #88	@ 0x58
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800070c:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <MX_SPI2_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <MX_SPI2_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_SPI2_Init+0x74>)
 8000714:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000718:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <MX_SPI2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_SPI2_Init+0x74>)
 8000722:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000726:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_SPI2_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_SPI2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_SPI2_Init+0x74>)
 8000736:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800073a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_SPI2_Init+0x74>)
 800073e:	2210      	movs	r2, #16
 8000740:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_SPI2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_SPI2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_SPI2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_SPI2_Init+0x74>)
 8000756:	2207      	movs	r2, #7
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075a:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_SPI2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_SPI2_Init+0x74>)
 8000762:	2208      	movs	r2, #8
 8000764:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_SPI2_Init+0x74>)
 8000768:	f002 ff14 	bl	8003594 <HAL_SPI_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000772:	f7ff ffc3 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000504 	.word	0x20000504
 8000780:	40003800 	.word	0x40003800

08000784 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a25      	ldr	r2, [pc, #148]	@ (8000838 <HAL_SPI_MspInit+0xb4>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d144      	bne.n	8000830 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007a6:	4b25      	ldr	r3, [pc, #148]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007aa:	4a24      	ldr	r2, [pc, #144]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a1e      	ldr	r2, [pc, #120]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a18      	ldr	r2, [pc, #96]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <HAL_SPI_MspInit+0xb8>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ee:	2304      	movs	r3, #4
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fe:	2305      	movs	r3, #5
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480d      	ldr	r0, [pc, #52]	@ (8000840 <HAL_SPI_MspInit+0xbc>)
 800080a:	f001 fa19 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800080e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000820:	2305      	movs	r3, #5
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <HAL_SPI_MspInit+0xc0>)
 800082c:	f001 fa08 	bl	8001c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	@ 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40003800 	.word	0x40003800
 800083c:	40021000 	.word	0x40021000
 8000840:	48000800 	.word	0x48000800
 8000844:	48000400 	.word	0x48000400

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000852:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	@ 0x60
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	@ 0x58
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f9ad 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80008f4:	4802      	ldr	r0, [pc, #8]	@ (8000900 <DMA1_Channel4_IRQHandler+0x10>)
 80008f6:	f001 f8c3 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000b4 	.word	0x200000b4

08000904 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <DMA1_Channel7_IRQHandler+0x10>)
 800090a:	f001 f8b9 	bl	8001a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200005b4 	.word	0x200005b4

08000918 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 800091c:	4802      	ldr	r0, [pc, #8]	@ (8000928 <DFSDM1_FLT0_IRQHandler+0x10>)
 800091e:	f000 fd39 	bl	8001394 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000028 	.word	0x20000028

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	@ (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	@ 0x38
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000982:	4b2d      	ldr	r3, [pc, #180]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 8000984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000988:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 38;
 800098a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 800098c:	2226      	movs	r2, #38	@ 0x26
 800098e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000996:	4b28      	ldr	r3, [pc, #160]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a2:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a8:	4823      	ldr	r0, [pc, #140]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 80009aa:	f002 fe96 	bl	80036da <HAL_TIM_Base_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009b4:	f7ff fea2 	bl	80006fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009c2:	4619      	mov	r1, r3
 80009c4:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 80009c6:	f003 f82b 	bl	8003a20 <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009d0:	f7ff fe94 	bl	80006fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80009d4:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 80009d6:	f002 ff47 	bl	8003868 <HAL_TIM_OC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009e0:	f7ff fe8c 	bl	80006fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4811      	ldr	r0, [pc, #68]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 80009f4:	f003 fcf4 	bl	80043e0 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009fe:	f7ff fe7d 	bl	80006fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	220c      	movs	r2, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 8000a1a:	f002 ff87 	bl	800392c <HAL_TIM_OC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a24:	f7ff fe6a 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a28:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <MX_TIM2_Init+0xe8>)
 8000a2a:	f000 f859 	bl	8000ae0 <HAL_TIM_MspPostInit>

}
 8000a2e:	bf00      	nop
 8000a30:	3738      	adds	r7, #56	@ 0x38
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000568 	.word	0x20000568

08000a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a4c:	d13d      	bne.n	8000aca <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x98>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a52:	4a20      	ldr	r2, [pc, #128]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x98>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <HAL_TIM_Base_MspInit+0x98>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a68:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <HAL_TIM_Base_MspInit+0xa0>)
 8000a6a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a8a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a96:	2220      	movs	r2, #32
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000aa2:	480d      	ldr	r0, [pc, #52]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000aa4:	f000 fed4 	bl	8001850 <HAL_DMA_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000aae:	f7ff fe25 	bl	80006fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ab6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ac2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <HAL_TIM_Base_MspInit+0x9c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	200005b4 	.word	0x200005b4
 8000adc:	40020080 	.word	0x40020080

08000ae0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b00:	d11c      	bne.n	8000b3c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_TIM_MspPostInit+0x64>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_TIM_MspPostInit+0x64>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_TIM_MspPostInit+0x64>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b38:	f001 f882 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff feee 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	@ (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f003 fcc3 	bl	8004500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f7ff fd3f 	bl	80005fc <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	080045a8 	.word	0x080045a8
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	20000624 	.word	0x20000624

08000b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_2_IRQHandler>

08000b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f93d 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f80e 	bl	8000bcc <HAL_InitTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	e001      	b.n	8000bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bbc:	f7ff fe44 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d023      	beq.n	8000c28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <HAL_InitTick+0x70>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_InitTick+0x6c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f949 	bl	8000e8e <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10f      	bne.n	8000c22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d809      	bhi.n	8000c1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f913 	bl	8000e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_InitTick+0x74>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e004      	b.n	8000c2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e001      	b.n	8000c2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200005fc 	.word	0x200005fc

08000c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200005fc 	.word	0x200005fc

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db0b      	blt.n	8000d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f003 021f 	and.w	r2, r3, #31
 8000d00:	4907      	ldr	r1, [pc, #28]	@ (8000d20 <__NVIC_EnableIRQ+0x38>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	095b      	lsrs	r3, r3, #5
 8000d08:	2001      	movs	r0, #1
 8000d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	@ (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	@ 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	@ 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff29 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff3e 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff31 	bl	8000ce8 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0ac      	b.n	8001014 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fc24 	bl	800170c <DFSDM_GetChannelFromInstance>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4a55      	ldr	r2, [pc, #340]	@ (800101c <HAL_DFSDM_ChannelInit+0x174>)
 8000ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e09f      	b.n	8001014 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fa87 	bl	80003e8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eda:	4b51      	ldr	r3, [pc, #324]	@ (8001020 <HAL_DFSDM_ChannelInit+0x178>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8001020 <HAL_DFSDM_ChannelInit+0x178>)
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8001020 <HAL_DFSDM_ChannelInit+0x178>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d125      	bne.n	8000f38 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000eec:	4b4d      	ldr	r3, [pc, #308]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a4c      	ldr	r2, [pc, #304]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ef2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000ef6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4948      	ldr	r1, [pc, #288]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000f06:	4b47      	ldr	r3, [pc, #284]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a46      	ldr	r2, [pc, #280]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f0c:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000f10:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	791b      	ldrb	r3, [r3, #4]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000f1a:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	041b      	lsls	r3, r3, #16
 8000f26:	493f      	ldr	r1, [pc, #252]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a3c      	ldr	r2, [pc, #240]	@ (8001024 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f36:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8000f46:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6819      	ldr	r1, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f56:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f5c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 020f 	bic.w	r2, r2, #15
 8000f74:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6819      	ldr	r1, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8000f9c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6899      	ldr	r1, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fac:	3b01      	subs	r3, #1
 8000fae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f002 0207 	and.w	r2, r2, #7
 8000fc8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ff4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fb82 	bl	800170c <DFSDM_GetChannelFromInstance>
 8001008:	4602      	mov	r2, r0
 800100a:	4904      	ldr	r1, [pc, #16]	@ (800101c <HAL_DFSDM_ChannelInit+0x174>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000604 	.word	0x20000604
 8001020:	20000600 	.word	0x20000600
 8001024:	40016000 	.word	0x40016000

08001028 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0ca      	b.n	80011f8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a66      	ldr	r2, [pc, #408]	@ (8001200 <HAL_DFSDM_FilterInit+0x1b0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d109      	bne.n	8001080 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001070:	2b01      	cmp	r3, #1
 8001072:	d003      	beq.n	800107c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0bb      	b.n	80011f8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff f8f9 	bl	8000290 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80010ac:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7a1b      	ldrb	r3, [r3, #8]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d108      	bne.n	80010c8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80010d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7a5b      	ldrb	r3, [r3, #9]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	f423 43ce 	bic.w	r3, r3, #26368	@ 0x6700
 8001110:	f023 0308 	bic.w	r3, r3, #8
 8001114:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d108      	bne.n	8001130 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6819      	ldr	r1, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7c1b      	ldrb	r3, [r3, #16]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d108      	bne.n	800114a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f042 0210 	orr.w	r2, r2, #16
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e007      	b.n	800115a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0210 	bic.w	r2, r2, #16
 8001158:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7c5b      	ldrb	r3, [r3, #17]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d108      	bne.n	8001174 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0220 	orr.w	r2, r2, #32
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e007      	b.n	8001184 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0220 	bic.w	r2, r2, #32
 8001182:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8001192:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001196:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6959      	ldr	r1, [r3, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011aa:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011b2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7c1a      	ldrb	r2, [r3, #16]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f042 0201 	orr.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40016100 	.word	0x40016100

08001204 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800121a:	2b00      	cmp	r3, #0
 800121c:	d02e      	beq.n	800127c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001224:	2bff      	cmp	r3, #255	@ 0xff
 8001226:	d029      	beq.n	800127c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d10d      	bne.n	800125e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001250:	431a      	orrs	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e00a      	b.n	8001274 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	631a      	str	r2, [r3, #48]	@ 0x30
 800127a:	e001      	b.n	8001280 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001280:	7dfb      	ldrb	r3, [r7, #23]
}
 8001282:	4618      	mov	r0, r3
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	75fb      	strb	r3, [r7, #23]
 80012b0:	e064      	b.n	800137c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80012c0:	d002      	beq.n	80012c8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
 80012c6:	e059      	b.n	800137c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10e      	bne.n	80012ee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d10a      	bne.n	80012ee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d002      	beq.n	80012ee <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
 80012ec:	e046      	b.n	800137c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10b      	bne.n	800130e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d107      	bne.n	800130e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001302:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001304:	2b20      	cmp	r3, #32
 8001306:	d102      	bne.n	800130e <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	e036      	b.n	800137c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001314:	2b01      	cmp	r3, #1
 8001316:	d004      	beq.n	8001322 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800131e:	2b03      	cmp	r3, #3
 8001320:	d12a      	bne.n	8001378 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001326:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	4a17      	ldr	r2, [pc, #92]	@ (800138c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001330:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001336:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001338:	2b20      	cmp	r3, #32
 800133a:	d101      	bne.n	8001340 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800133e:	e000      	b.n	8001342 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001340:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001346:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	331c      	adds	r3, #28
 8001352:	4619      	mov	r1, r3
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f000 fb32 	bl	80019c0 <HAL_DMA_Start_IT>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	22ff      	movs	r2, #255	@ 0xff
 8001366:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800136e:	e005      	b.n	800137c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fa17 	bl	80017a4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001376:	e001      	b.n	800137c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800137c:	7dfb      	ldrb	r3, [r7, #23]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	080016cd 	.word	0x080016cd
 800138c:	080016e9 	.word	0x080016e9
 8001390:	080016b1 	.word	0x080016b1

08001394 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00a      	beq.n	80013d6 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2208      	movs	r2, #8
 80013c6:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff f90a 	bl	80005e8 <HAL_DFSDM_FilterErrorCallback>
 80013d4:	e13a      	b.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00f      	beq.n	8001400 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00a      	beq.n	8001400 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2204      	movs	r2, #4
 80013f0:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2202      	movs	r2, #2
 80013f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff f8f5 	bl	80005e8 <HAL_DFSDM_FilterErrorCallback>
 80013fe:	e125      	b.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d025      	beq.n	8001456 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f921 	bl	800165c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 8113 	bne.w	800164a <HAL_DFSDM_IRQHandler+0x2b6>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001428:	2b00      	cmp	r3, #0
 800142a:	f040 810e 	bne.w	800164a <HAL_DFSDM_IRQHandler+0x2b6>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0202 	bic.w	r2, r2, #2
 800143c:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001444:	2b02      	cmp	r3, #2
 8001446:	d101      	bne.n	800144c <HAL_DFSDM_IRQHandler+0xb8>
 8001448:	2201      	movs	r2, #1
 800144a:	e000      	b.n	800144e <HAL_DFSDM_IRQHandler+0xba>
 800144c:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001454:	e0f9      	b.n	800164a <HAL_DFSDM_IRQHandler+0x2b6>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d034      	beq.n	80014ca <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8001466:	2b00      	cmp	r3, #0
 8001468:	d02f      	beq.n	80014ca <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f90a 	bl	8001684 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	649a      	str	r2, [r3, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 80e4 	bne.w	800164c <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001488:	2b00      	cmp	r3, #0
 800148a:	d112      	bne.n	80014b2 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d101      	bne.n	80014aa <HAL_DFSDM_IRQHandler+0x116>
 80014a6:	2201      	movs	r2, #1
 80014a8:	e000      	b.n	80014ac <HAL_DFSDM_IRQHandler+0x118>
 80014aa:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d102      	bne.n	80014c2 <HAL_DFSDM_IRQHandler+0x12e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c0:	e000      	b.n	80014c4 <HAL_DFSDM_IRQHandler+0x130>
 80014c2:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6493      	str	r3, [r2, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80014c8:	e0c0      	b.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d03d      	beq.n	8001550 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d038      	beq.n	8001550 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_DFSDM_IRQHandler+0x162>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_DFSDM_IRQHandler+0x164>
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001506:	e005      	b.n	8001514 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	3301      	adds	r3, #1
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
      reg = reg >> 1;
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	085b      	lsrs	r3, r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_DFSDM_IRQHandler+0x190>
 800151e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001520:	2b06      	cmp	r3, #6
 8001522:	d9f1      	bls.n	8001508 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <HAL_DFSDM_IRQHandler+0x1a2>
 800152a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152c:	3308      	adds	r3, #8
 800152e:	2201      	movs	r2, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	e003      	b.n	800153e <HAL_DFSDM_IRQHandler+0x1aa>
 8001536:	2201      	movs	r2, #1
 8001538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f8a5 	bl	8001698 <HAL_DFSDM_FilterAwdCallback>
  {
 800154e:	e07d      	b.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a3f      	ldr	r2, [pc, #252]	@ (8001654 <HAL_DFSDM_IRQHandler+0x2c0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d141      	bne.n	80015de <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03c      	beq.n	80015de <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 800156a:	2b00      	cmp	r3, #0
 800156c:	d037      	beq.n	80015de <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	b2db      	uxtb	r3, r3
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800157e:	e02a      	b.n	80015d6 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01f      	beq.n	80015ca <HAL_DFSDM_IRQHandler+0x236>
 800158a:	4a33      	ldr	r2, [pc, #204]	@ (8001658 <HAL_DFSDM_IRQHandler+0x2c4>)
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d019      	beq.n	80015ca <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8001596:	4a30      	ldr	r2, [pc, #192]	@ (8001658 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00f      	beq.n	80015ca <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	f103 0210 	add.w	r2, r3, #16
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 80015bc:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <HAL_DFSDM_IRQHandler+0x2c4>)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd2f 	bl	8001028 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	3301      	adds	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	2b07      	cmp	r3, #7
 80015da:	d9d1      	bls.n	8001580 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 80015dc:	e036      	b.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_DFSDM_IRQHandler+0x2c0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d131      	bne.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ee:	d32d      	bcc.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d028      	beq.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	0e1b      	lsrs	r3, r3, #24
 8001606:	b2db      	uxtb	r3, r3
 8001608:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800160a:	e005      	b.n	8001618 <HAL_DFSDM_IRQHandler+0x284>
    {
      channel++;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	3301      	adds	r3, #1
 8001610:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	085b      	lsrs	r3, r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_DFSDM_IRQHandler+0x294>
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b06      	cmp	r3, #6
 8001626:	d9f1      	bls.n	800160c <HAL_DFSDM_IRQHandler+0x278>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	f103 0218 	add.w	r2, r3, #24
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 800163a:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <HAL_DFSDM_IRQHandler+0x2c4>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fcfa 	bl	800103c <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8001648:	e000      	b.n	800164c <HAL_DFSDM_IRQHandler+0x2b8>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800164a:	bf00      	nop
}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	@ 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40016100 	.word	0x40016100
 8001658:	20000604 	.word	0x20000604

0800165c <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff ffd6 	bl	8001670 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff ffbe 	bl	800165c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2203      	movs	r2, #3
 80016fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f7fe ff73 	bl	80005e8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a1c      	ldr	r2, [pc, #112]	@ (8001788 <DFSDM_GetChannelFromInstance+0x7c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e02b      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a19      	ldr	r2, [pc, #100]	@ (800178c <DFSDM_GetChannelFromInstance+0x80>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d102      	bne.n	8001730 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e024      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <DFSDM_GetChannelFromInstance+0x84>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d102      	bne.n	800173e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e01d      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <DFSDM_GetChannelFromInstance+0x88>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d102      	bne.n	800174c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001746:	2304      	movs	r3, #4
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e016      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <DFSDM_GetChannelFromInstance+0x8c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001754:	2305      	movs	r3, #5
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e00f      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <DFSDM_GetChannelFromInstance+0x90>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d102      	bne.n	8001768 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001762:	2306      	movs	r3, #6
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e008      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <DFSDM_GetChannelFromInstance+0x94>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d102      	bne.n	8001776 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001770:	2307      	movs	r3, #7
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e001      	b.n	800177a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001776:	2303      	movs	r3, #3
 8001778:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40016000 	.word	0x40016000
 800178c:	40016020 	.word	0x40016020
 8001790:	40016040 	.word	0x40016040
 8001794:	40016080 	.word	0x40016080
 8001798:	400160a0 	.word	0x400160a0
 800179c:	400160c0 	.word	0x400160c0
 80017a0:	400160e0 	.word	0x400160e0

080017a4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e033      	b.n	800182e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0201 	bic.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80017e4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d116      	bne.n	800182e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001804:	2b00      	cmp	r3, #0
 8001806:	d107      	bne.n	8001818 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0202 	orr.w	r2, r2, #2
 8001816:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800181e:	2b01      	cmp	r3, #1
 8001820:	d102      	bne.n	8001828 <DFSDM_RegConvStart+0x84>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	e000      	b.n	800182a <DFSDM_RegConvStart+0x86>
 8001828:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <DFSDM_RegConvStart+0x98>
 8001838:	2202      	movs	r2, #2
 800183a:	e000      	b.n	800183e <DFSDM_RegConvStart+0x9a>
 800183c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e098      	b.n	8001994 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	4b4d      	ldr	r3, [pc, #308]	@ (80019a0 <HAL_DMA_Init+0x150>)
 800186a:	429a      	cmp	r2, r3
 800186c:	d80f      	bhi.n	800188e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <HAL_DMA_Init+0x154>)
 8001876:	4413      	add	r3, r2
 8001878:	4a4b      	ldr	r2, [pc, #300]	@ (80019a8 <HAL_DMA_Init+0x158>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a48      	ldr	r2, [pc, #288]	@ (80019ac <HAL_DMA_Init+0x15c>)
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40
 800188c:	e00e      	b.n	80018ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b46      	ldr	r3, [pc, #280]	@ (80019b0 <HAL_DMA_Init+0x160>)
 8001896:	4413      	add	r3, r2
 8001898:	4a43      	ldr	r2, [pc, #268]	@ (80019a8 <HAL_DMA_Init+0x158>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	009a      	lsls	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a42      	ldr	r2, [pc, #264]	@ (80019b4 <HAL_DMA_Init+0x164>)
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001906:	d039      	beq.n	800197c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	4a27      	ldr	r2, [pc, #156]	@ (80019ac <HAL_DMA_Init+0x15c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d11a      	bne.n	8001948 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001912:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <HAL_DMA_Init+0x168>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	f003 031c 	and.w	r3, r3, #28
 800191e:	210f      	movs	r1, #15
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4924      	ldr	r1, [pc, #144]	@ (80019b8 <HAL_DMA_Init+0x168>)
 8001928:	4013      	ands	r3, r2
 800192a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800192c:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <HAL_DMA_Init+0x168>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	f003 031c 	and.w	r3, r3, #28
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	491d      	ldr	r1, [pc, #116]	@ (80019b8 <HAL_DMA_Init+0x168>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
 8001946:	e019      	b.n	800197c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <HAL_DMA_Init+0x16c>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	210f      	movs	r1, #15
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4917      	ldr	r1, [pc, #92]	@ (80019bc <HAL_DMA_Init+0x16c>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_DMA_Init+0x16c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	f003 031c 	and.w	r3, r3, #28
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	4911      	ldr	r1, [pc, #68]	@ (80019bc <HAL_DMA_Init+0x16c>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40020407 	.word	0x40020407
 80019a4:	bffdfff8 	.word	0xbffdfff8
 80019a8:	cccccccd 	.word	0xcccccccd
 80019ac:	40020000 	.word	0x40020000
 80019b0:	bffdfbf8 	.word	0xbffdfbf8
 80019b4:	40020400 	.word	0x40020400
 80019b8:	400200a8 	.word	0x400200a8
 80019bc:	400204a8 	.word	0x400204a8

080019c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Start_IT+0x20>
 80019dc:	2302      	movs	r3, #2
 80019de:	e04b      	b.n	8001a78 <HAL_DMA_Start_IT+0xb8>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d13a      	bne.n	8001a6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0201 	bic.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f8e0 	bl	8001bde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 020e 	orr.w	r2, r2, #14
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	e00f      	b.n	8001a58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 020a 	orr.w	r2, r2, #10
 8001a56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e005      	b.n	8001a76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f003 031c 	and.w	r3, r3, #28
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d026      	beq.n	8001afa <HAL_DMA_IRQHandler+0x7a>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d021      	beq.n	8001afa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0204 	bic.w	r2, r2, #4
 8001ad2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad8:	f003 021c 	and.w	r2, r3, #28
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d071      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001af8:	e06c      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f003 031c 	and.w	r3, r3, #28
 8001b02:	2202      	movs	r2, #2
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d02e      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xec>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d029      	beq.n	8001b6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10b      	bne.n	8001b3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 020a 	bic.w	r2, r2, #10
 8001b34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	f003 021c 	and.w	r2, r3, #28
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d038      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b6a:	e033      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	f003 031c 	and.w	r3, r3, #28
 8001b74:	2208      	movs	r2, #8
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d02a      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d025      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 020e 	bic.w	r2, r2, #14
 8001b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f003 021c 	and.w	r2, r3, #28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
}
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	f003 021c 	and.w	r2, r3, #28
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d108      	bne.n	8001c22 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c20:	e007      	b.n	8001c32 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	e17f      	b.n	8001f50 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8171 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d005      	beq.n	8001c80 <HAL_GPIO_Init+0x40>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d130      	bne.n	8001ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 0201 	and.w	r2, r3, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d118      	bne.n	8001d20 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	08db      	lsrs	r3, r3, #3
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	6939      	ldr	r1, [r7, #16]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ac 	beq.w	8001f4a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f70 <HAL_GPIO_Init+0x330>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f70 <HAL_GPIO_Init+0x330>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001f70 <HAL_GPIO_Init+0x330>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <HAL_GPIO_Init+0x334>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4f      	ldr	r2, [pc, #316]	@ (8001f78 <HAL_GPIO_Init+0x338>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x23e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4e      	ldr	r2, [pc, #312]	@ (8001f7c <HAL_GPIO_Init+0x33c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x23a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4d      	ldr	r2, [pc, #308]	@ (8001f80 <HAL_GPIO_Init+0x340>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x236>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4c      	ldr	r2, [pc, #304]	@ (8001f84 <HAL_GPIO_Init+0x344>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x232>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4b      	ldr	r2, [pc, #300]	@ (8001f88 <HAL_GPIO_Init+0x348>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x22e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4a      	ldr	r2, [pc, #296]	@ (8001f8c <HAL_GPIO_Init+0x34c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x22a>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x244>
 8001e82:	2300      	movs	r3, #0
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e94:	4937      	ldr	r1, [pc, #220]	@ (8001f74 <HAL_GPIO_Init+0x334>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec6:	4a32      	ldr	r2, [pc, #200]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ecc:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef0:	4a27      	ldr	r2, [pc, #156]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ef6:	4b26      	ldr	r3, [pc, #152]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f44:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <HAL_GPIO_Init+0x350>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f ae78 	bne.w	8001c50 <HAL_GPIO_Init+0x10>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000c00 	.word	0x48000c00
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	48001800 	.word	0x48001800
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fb0:	e002      	b.n	8001fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <HAL_PWREx_GetVoltageRange+0x18>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40007000 	.word	0x40007000

08001fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fee:	d130      	bne.n	8002052 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff0:	4b23      	ldr	r3, [pc, #140]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ffc:	d038      	beq.n	8002070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002006:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002008:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2232      	movs	r2, #50	@ 0x32
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	4a1b      	ldr	r2, [pc, #108]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	3301      	adds	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002024:	e002      	b.n	800202c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3b01      	subs	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202c:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002038:	d102      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x60>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f2      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204c:	d110      	bne.n	8002070 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e00f      	b.n	8002072 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002052:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205e:	d007      	beq.n	8002070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002060:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002068:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800206e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40007000 	.word	0x40007000
 8002084:	20000000 	.word	0x20000000
 8002088:	431bde83 	.word	0x431bde83

0800208c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e3ca      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209e:	4b97      	ldr	r3, [pc, #604]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a8:	4b94      	ldr	r3, [pc, #592]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80e4 	beq.w	8002288 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_RCC_OscConfig+0x4a>
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	f040 808b 	bne.w	80021e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	f040 8087 	bne.w	80021e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020d6:	4b89      	ldr	r3, [pc, #548]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x62>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e3a2      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	4b82      	ldr	r3, [pc, #520]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_RCC_OscConfig+0x7c>
 80020fe:	4b7f      	ldr	r3, [pc, #508]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002106:	e005      	b.n	8002114 <HAL_RCC_OscConfig+0x88>
 8002108:	4b7c      	ldr	r3, [pc, #496]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800210a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002114:	4293      	cmp	r3, r2
 8002116:	d223      	bcs.n	8002160 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fd1d 	bl	8002b5c <RCC_SetFlashLatencyFromMSIRange>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e383      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212c:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a72      	ldr	r2, [pc, #456]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b70      	ldr	r3, [pc, #448]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	496d      	ldr	r1, [pc, #436]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214a:	4b6c      	ldr	r3, [pc, #432]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	4968      	ldr	r1, [pc, #416]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
 800215e:	e025      	b.n	80021ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002160:	4b66      	ldr	r3, [pc, #408]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a65      	ldr	r2, [pc, #404]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b63      	ldr	r3, [pc, #396]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4960      	ldr	r1, [pc, #384]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800217e:	4b5f      	ldr	r3, [pc, #380]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	495b      	ldr	r1, [pc, #364]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fcdd 	bl	8002b5c <RCC_SetFlashLatencyFromMSIRange>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e343      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021ac:	f000 fc4a 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b52      	ldr	r3, [pc, #328]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	4950      	ldr	r1, [pc, #320]	@ (8002300 <HAL_RCC_OscConfig+0x274>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002304 <HAL_RCC_OscConfig+0x278>)
 80021ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002308 <HAL_RCC_OscConfig+0x27c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fcfb 	bl	8000bcc <HAL_InitTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d052      	beq.n	8002286 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	e327      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d032      	beq.n	8002252 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021ec:	4b43      	ldr	r3, [pc, #268]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a42      	ldr	r2, [pc, #264]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fd38 	bl	8000c6c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002200:	f7fe fd34 	bl	8000c6c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e310      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002212:	4b3a      	ldr	r3, [pc, #232]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800221e:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a36      	ldr	r2, [pc, #216]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4931      	ldr	r1, [pc, #196]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800223c:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	492c      	ldr	r1, [pc, #176]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
 8002250:	e01a      	b.n	8002288 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002252:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 8002258:	f023 0301 	bic.w	r3, r3, #1
 800225c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800225e:	f7fe fd05 	bl	8000c6c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002266:	f7fe fd01 	bl	8000c6c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e2dd      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002278:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x1da>
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002286:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d074      	beq.n	800237e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x21a>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d10e      	bne.n	80022be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d10b      	bne.n	80022be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a6:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d064      	beq.n	800237c <HAL_RCC_OscConfig+0x2f0>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d160      	bne.n	800237c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e2ba      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x24a>
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e026      	b.n	8002324 <HAL_RCC_OscConfig+0x298>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022de:	d115      	bne.n	800230c <HAL_RCC_OscConfig+0x280>
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80022e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b03      	ldr	r3, [pc, #12]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a02      	ldr	r2, [pc, #8]	@ (80022fc <HAL_RCC_OscConfig+0x270>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e014      	b.n	8002324 <HAL_RCC_OscConfig+0x298>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	08004560 	.word	0x08004560
 8002304:	20000000 	.word	0x20000000
 8002308:	20000004 	.word	0x20000004
 800230c:	4ba0      	ldr	r3, [pc, #640]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a9f      	ldr	r2, [pc, #636]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b9d      	ldr	r3, [pc, #628]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a9c      	ldr	r2, [pc, #624]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fc9e 	bl	8000c6c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fc9a 	bl	8000c6c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	@ 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e276      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	4b92      	ldr	r3, [pc, #584]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x2a8>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fc8a 	bl	8000c6c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fc86 	bl	8000c6c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	@ 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e262      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	4b88      	ldr	r3, [pc, #544]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x2d0>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d060      	beq.n	800244c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d005      	beq.n	800239c <HAL_RCC_OscConfig+0x310>
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d119      	bne.n	80023ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d116      	bne.n	80023ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239c:	4b7c      	ldr	r3, [pc, #496]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x328>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e23f      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b76      	ldr	r3, [pc, #472]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	4973      	ldr	r1, [pc, #460]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c8:	e040      	b.n	800244c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d023      	beq.n	800241a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7fe fc45 	bl	8000c6c <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7fe fc41 	bl	8000c6c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e21d      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f8:	4b65      	ldr	r3, [pc, #404]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b62      	ldr	r3, [pc, #392]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	495f      	ldr	r1, [pc, #380]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
 8002418:	e018      	b.n	800244c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b5d      	ldr	r3, [pc, #372]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a5c      	ldr	r2, [pc, #368]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7fe fc21 	bl	8000c6c <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe fc1d 	bl	8000c6c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1f9      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002440:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d03c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01c      	beq.n	800249a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002460:	4b4b      	ldr	r3, [pc, #300]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002466:	4a4a      	ldr	r2, [pc, #296]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002470:	f7fe fbfc 	bl	8000c6c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe fbf8 	bl	8000c6c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e1d4      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248a:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800248c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ef      	beq.n	8002478 <HAL_RCC_OscConfig+0x3ec>
 8002498:	e01b      	b.n	80024d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800249c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7fe fbdf 	bl	8000c6c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b2:	f7fe fbdb 	bl	8000c6c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1b7      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	4b32      	ldr	r3, [pc, #200]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1ef      	bne.n	80024b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80a6 	beq.w	800262c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e0:	2300      	movs	r3, #0
 80024e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10d      	bne.n	800250c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	4a26      	ldr	r2, [pc, #152]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fc:	4b24      	ldr	r3, [pc, #144]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002508:	2301      	movs	r3, #1
 800250a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250c:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <HAL_RCC_OscConfig+0x508>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d118      	bne.n	800254a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002518:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <HAL_RCC_OscConfig+0x508>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1d      	ldr	r2, [pc, #116]	@ (8002594 <HAL_RCC_OscConfig+0x508>)
 800251e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002524:	f7fe fba2 	bl	8000c6c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252c:	f7fe fb9e 	bl	8000c6c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e17a      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253e:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <HAL_RCC_OscConfig+0x508>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <HAL_RCC_OscConfig+0x4d8>
 8002552:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002562:	e029      	b.n	80025b8 <HAL_RCC_OscConfig+0x52c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b05      	cmp	r3, #5
 800256a:	d115      	bne.n	8002598 <HAL_RCC_OscConfig+0x50c>
 800256c:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800257c:	4b04      	ldr	r3, [pc, #16]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002582:	4a03      	ldr	r2, [pc, #12]	@ (8002590 <HAL_RCC_OscConfig+0x504>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800258c:	e014      	b.n	80025b8 <HAL_RCC_OscConfig+0x52c>
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	4b9c      	ldr	r3, [pc, #624]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	4a9b      	ldr	r2, [pc, #620]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a8:	4b98      	ldr	r3, [pc, #608]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	4a97      	ldr	r2, [pc, #604]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d016      	beq.n	80025ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7fe fb54 	bl	8000c6c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7fe fb50 	bl	8000c6c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e12a      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025de:	4b8b      	ldr	r3, [pc, #556]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ed      	beq.n	80025c8 <HAL_RCC_OscConfig+0x53c>
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7fe fb3d 	bl	8000c6c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe fb39 	bl	8000c6c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e113      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800260c:	4b7f      	ldr	r3, [pc, #508]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ed      	bne.n	80025f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800261a:	7ffb      	ldrb	r3, [r7, #31]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002620:	4b7a      	ldr	r3, [pc, #488]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002624:	4a79      	ldr	r2, [pc, #484]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800262a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80fe 	beq.w	8002832 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	2b02      	cmp	r3, #2
 800263c:	f040 80d0 	bne.w	80027e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002640:	4b72      	ldr	r3, [pc, #456]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	429a      	cmp	r2, r3
 8002652:	d130      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	3b01      	subs	r3, #1
 8002660:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d127      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002670:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d11f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002680:	2a07      	cmp	r2, #7
 8002682:	bf14      	ite	ne
 8002684:	2201      	movne	r2, #1
 8002686:	2200      	moveq	r2, #0
 8002688:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268a:	4293      	cmp	r3, r2
 800268c:	d113      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d06e      	beq.n	8002794 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b0c      	cmp	r3, #12
 80026ba:	d069      	beq.n	8002790 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026bc:	4b53      	ldr	r3, [pc, #332]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026c8:	4b50      	ldr	r3, [pc, #320]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0ad      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026d8:	4b4c      	ldr	r3, [pc, #304]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a4b      	ldr	r2, [pc, #300]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80026de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026e4:	f7fe fac2 	bl	8000c6c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fabe 	bl	8000c6c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e09a      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fe:	4b43      	ldr	r3, [pc, #268]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270a:	4b40      	ldr	r3, [pc, #256]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b40      	ldr	r3, [pc, #256]	@ (8002810 <HAL_RCC_OscConfig+0x784>)
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800271a:	3a01      	subs	r2, #1
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	4311      	orrs	r1, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002724:	0212      	lsls	r2, r2, #8
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800272c:	0852      	lsrs	r2, r2, #1
 800272e:	3a01      	subs	r2, #1
 8002730:	0552      	lsls	r2, r2, #21
 8002732:	4311      	orrs	r1, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002738:	0852      	lsrs	r2, r2, #1
 800273a:	3a01      	subs	r2, #1
 800273c:	0652      	lsls	r2, r2, #25
 800273e:	4311      	orrs	r1, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002744:	0912      	lsrs	r2, r2, #4
 8002746:	0452      	lsls	r2, r2, #17
 8002748:	430a      	orrs	r2, r1
 800274a:	4930      	ldr	r1, [pc, #192]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 800274c:	4313      	orrs	r3, r2
 800274e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002750:	4b2e      	ldr	r3, [pc, #184]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2d      	ldr	r2, [pc, #180]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002768:	f7fe fa80 	bl	8000c6c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fa7c 	bl	8000c6c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e058      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	4b22      	ldr	r3, [pc, #136]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800278e:	e050      	b.n	8002832 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e04f      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002794:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d148      	bne.n	8002832 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027a0:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a19      	ldr	r2, [pc, #100]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ac:	4b17      	ldr	r3, [pc, #92]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a16      	ldr	r2, [pc, #88]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027b8:	f7fe fa58 	bl	8000c6c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fa54 	bl	8000c6c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e030      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x734>
 80027de:	e028      	b.n	8002832 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d023      	beq.n	800282e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b09      	ldr	r3, [pc, #36]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a08      	ldr	r2, [pc, #32]	@ (800280c <HAL_RCC_OscConfig+0x780>)
 80027ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fa3b 	bl	8000c6c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f8:	e00c      	b.n	8002814 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe fa37 	bl	8000c6c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d905      	bls.n	8002814 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e013      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
 800280c:	40021000 	.word	0x40021000
 8002810:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002814:	4b09      	ldr	r3, [pc, #36]	@ (800283c <HAL_RCC_OscConfig+0x7b0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ec      	bne.n	80027fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_RCC_OscConfig+0x7b0>)
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	4905      	ldr	r1, [pc, #20]	@ (800283c <HAL_RCC_OscConfig+0x7b0>)
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_RCC_OscConfig+0x7b4>)
 8002828:	4013      	ands	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
 800282c:	e001      	b.n	8002832 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	feeefffc 	.word	0xfeeefffc

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0e7      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b75      	ldr	r3, [pc, #468]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b72      	ldr	r3, [pc, #456]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4970      	ldr	r1, [pc, #448]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b6e      	ldr	r3, [pc, #440]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0cf      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b66      	ldr	r3, [pc, #408]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d908      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b63      	ldr	r3, [pc, #396]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4960      	ldr	r1, [pc, #384]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04c      	beq.n	800295c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d121      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0a6      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e2:	4b54      	ldr	r3, [pc, #336]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d115      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e09a      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e08e      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e086      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b46      	ldr	r3, [pc, #280]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4943      	ldr	r1, [pc, #268]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800292c:	f7fe f99e 	bl	8000c6c <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7fe f99a 	bl	8000c6c <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e06e      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002974:	429a      	cmp	r2, r3
 8002976:	d208      	bcs.n	800298a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	492b      	ldr	r1, [pc, #172]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298a:	4b29      	ldr	r3, [pc, #164]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d210      	bcs.n	80029ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002998:	4b25      	ldr	r3, [pc, #148]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 0207 	bic.w	r2, r3, #7
 80029a0:	4923      	ldr	r1, [pc, #140]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e036      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4918      	ldr	r1, [pc, #96]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4910      	ldr	r1, [pc, #64]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f8:	f000 f824 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	490b      	ldr	r1, [pc, #44]	@ (8002a38 <HAL_RCC_ClockConfig+0x1f4>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	4a09      	ldr	r2, [pc, #36]	@ (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_ClockConfig+0x1fc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f8d5 	bl	8000bcc <HAL_InitTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a26:	7afb      	ldrb	r3, [r7, #11]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08004560 	.word	0x08004560
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	@ 0x24
 8002a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a52:	4b3e      	ldr	r3, [pc, #248]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d11e      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a78:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a84:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e005      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a94:	4b2d      	ldr	r3, [pc, #180]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002abc:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e004      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac8:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d134      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0xa6>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d003      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ae8:	e005      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aec:	617b      	str	r3, [r7, #20]
      break;
 8002aee:	e005      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002af2:	617b      	str	r3, [r7, #20]
      break;
 8002af4:	e002      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	617b      	str	r3, [r7, #20]
      break;
 8002afa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002afc:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	fb03 f202 	mul.w	r2, r3, r2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	0e5b      	lsrs	r3, r3, #25
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	@ 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	08004570 	.word	0x08004570
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b68:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b74:	f7ff fa26 	bl	8001fc4 <HAL_PWREx_GetVoltageRange>
 8002b78:	6178      	str	r0, [r7, #20]
 8002b7a:	e014      	b.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b25      	ldr	r3, [pc, #148]	@ (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	4a24      	ldr	r2, [pc, #144]	@ (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b88:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b94:	f7ff fa16 	bl	8001fc4 <HAL_PWREx_GetVoltageRange>
 8002b98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bac:	d10b      	bne.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b80      	cmp	r3, #128	@ 0x80
 8002bb2:	d919      	bls.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bb8:	d902      	bls.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bba:	2302      	movs	r3, #2
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	e013      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	e010      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b80      	cmp	r3, #128	@ 0x80
 8002bca:	d902      	bls.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bcc:	2303      	movs	r3, #3
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	e00a      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	@ 0x80
 8002bd6:	d102      	bne.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd8:	2302      	movs	r3, #2
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	e004      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b70      	cmp	r3, #112	@ 0x70
 8002be2:	d101      	bne.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 0207 	bic.w	r2, r3, #7
 8002bf0:	4909      	ldr	r1, [pc, #36]	@ (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf8:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40022000 	.word	0x40022000

08002c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c28:	2300      	movs	r3, #0
 8002c2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d041      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c40:	d02a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c46:	d824      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c52:	d81e      	bhi.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c5e:	e018      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c60:	4b86      	ldr	r3, [pc, #536]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a85      	ldr	r2, [pc, #532]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c6c:	e015      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fabb 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c7e:	e00c      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3320      	adds	r3, #32
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fba6 	bl	80033d8 <RCCEx_PLLSAI2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	74fb      	strb	r3, [r7, #19]
      break;
 8002c96:	e000      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca0:	4b76      	ldr	r3, [pc, #472]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cae:	4973      	ldr	r1, [pc, #460]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cb6:	e001      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d041      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ccc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd0:	d02a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cd6:	d824      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ce2:	d81e      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cec:	d010      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cee:	e018      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf0:	4b62      	ldr	r3, [pc, #392]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a61      	ldr	r2, [pc, #388]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cfc:	e015      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fa73 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d0e:	e00c      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3320      	adds	r3, #32
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fb5e 	bl	80033d8 <RCCEx_PLLSAI2_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d20:	e003      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	74fb      	strb	r3, [r7, #19]
      break;
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d30:	4b52      	ldr	r3, [pc, #328]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d3e:	494f      	ldr	r1, [pc, #316]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a0 	beq.w	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d5e:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d74:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	4a40      	ldr	r2, [pc, #256]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d80:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d90:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a3a      	ldr	r2, [pc, #232]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d9c:	f7fd ff66 	bl	8000c6c <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fd ff62 	bl	8000c6c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	74fb      	strb	r3, [r7, #19]
        break;
 8002db6:	e005      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db8:	4b31      	ldr	r3, [pc, #196]	@ (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d15c      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dca:	4b2c      	ldr	r3, [pc, #176]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01f      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d019      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002de8:	4b24      	ldr	r3, [pc, #144]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df4:	4b21      	ldr	r3, [pc, #132]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfa:	4a20      	ldr	r2, [pc, #128]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	4b1d      	ldr	r3, [pc, #116]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e14:	4a19      	ldr	r2, [pc, #100]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fd ff21 	bl	8000c6c <HAL_GetTick>
 8002e2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2c:	e00b      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7fd ff1d 	bl	8000c6c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d902      	bls.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	74fb      	strb	r3, [r7, #19]
            break;
 8002e44:	e006      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ec      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5a:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e6a:	4904      	ldr	r1, [pc, #16]	@ (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e72:	e009      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
 8002e78:	e006      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e88:	7c7b      	ldrb	r3, [r7, #17]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8e:	4b9e      	ldr	r3, [pc, #632]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	4a9d      	ldr	r2, [pc, #628]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea6:	4b98      	ldr	r3, [pc, #608]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eac:	f023 0203 	bic.w	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb4:	4994      	ldr	r1, [pc, #592]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec8:	4b8f      	ldr	r3, [pc, #572]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ece:	f023 020c 	bic.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed6:	498c      	ldr	r1, [pc, #560]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eea:	4b87      	ldr	r3, [pc, #540]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	4983      	ldr	r1, [pc, #524]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1a:	497b      	ldr	r1, [pc, #492]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f2e:	4b76      	ldr	r3, [pc, #472]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3c:	4972      	ldr	r1, [pc, #456]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f50:	4b6d      	ldr	r3, [pc, #436]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	496a      	ldr	r1, [pc, #424]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f72:	4b65      	ldr	r3, [pc, #404]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	4961      	ldr	r1, [pc, #388]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f94:	4b5c      	ldr	r3, [pc, #368]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa2:	4959      	ldr	r1, [pc, #356]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb6:	4b54      	ldr	r3, [pc, #336]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc4:	4950      	ldr	r1, [pc, #320]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	4948      	ldr	r1, [pc, #288]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ffa:	4b43      	ldr	r3, [pc, #268]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	493f      	ldr	r1, [pc, #252]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d028      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800301c:	4b3a      	ldr	r3, [pc, #232]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800302a:	4937      	ldr	r1, [pc, #220]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800303a:	d106      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800303c:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a31      	ldr	r2, [pc, #196]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003046:	60d3      	str	r3, [r2, #12]
 8003048:	e011      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800304e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003052:	d10c      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2101      	movs	r1, #1
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f8c8 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d028      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800307a:	4b23      	ldr	r3, [pc, #140]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003088:	491f      	ldr	r1, [pc, #124]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003094:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003098:	d106      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800309a:	4b1b      	ldr	r3, [pc, #108]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	4a1a      	ldr	r2, [pc, #104]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a4:	60d3      	str	r3, [r2, #12]
 80030a6:	e011      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f899 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02b      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e6:	4908      	ldr	r1, [pc, #32]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030f6:	d109      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b03      	ldr	r3, [pc, #12]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a02      	ldr	r2, [pc, #8]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
 8003104:	e014      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003114:	d10c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f867 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003126:	7cfb      	ldrb	r3, [r7, #19]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02f      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800313c:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800314a:	4928      	ldr	r1, [pc, #160]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003156:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800315a:	d10d      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f844 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d014      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	74bb      	strb	r3, [r7, #18]
 8003176:	e011      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800317c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003180:	d10c      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3320      	adds	r3, #32
 8003186:	2102      	movs	r1, #2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f925 	bl	80033d8 <RCCEx_PLLSAI2_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003192:	7cfb      	ldrb	r3, [r7, #19]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031a8:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031b6:	490d      	ldr	r1, [pc, #52]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031ca:	4b08      	ldr	r3, [pc, #32]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031da:	4904      	ldr	r1, [pc, #16]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40021000 	.word	0x40021000

080031f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fe:	4b75      	ldr	r3, [pc, #468]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d018      	beq.n	800323c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800320a:	4b72      	ldr	r3, [pc, #456]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0203 	and.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d10d      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
       ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003222:	4b6c      	ldr	r3, [pc, #432]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
       ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d047      	beq.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e044      	b.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d018      	beq.n	8003276 <RCCEx_PLLSAI1_Config+0x86>
 8003244:	2b03      	cmp	r3, #3
 8003246:	d825      	bhi.n	8003294 <RCCEx_PLLSAI1_Config+0xa4>
 8003248:	2b01      	cmp	r3, #1
 800324a:	d002      	beq.n	8003252 <RCCEx_PLLSAI1_Config+0x62>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d009      	beq.n	8003264 <RCCEx_PLLSAI1_Config+0x74>
 8003250:	e020      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003252:	4b60      	ldr	r3, [pc, #384]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11d      	bne.n	800329a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003262:	e01a      	b.n	800329a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003264:	4b5b      	ldr	r3, [pc, #364]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e013      	b.n	800329e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003276:	4b57      	ldr	r3, [pc, #348]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003282:	4b54      	ldr	r3, [pc, #336]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003292:	e006      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e004      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032aa:	4b4a      	ldr	r3, [pc, #296]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	430b      	orrs	r3, r1
 80032c0:	4944      	ldr	r1, [pc, #272]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d17d      	bne.n	80033c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032cc:	4b41      	ldr	r3, [pc, #260]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a40      	ldr	r2, [pc, #256]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd fcc8 	bl	8000c6c <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032de:	e009      	b.n	80032f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e0:	f7fd fcc4 	bl	8000c6c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	73fb      	strb	r3, [r7, #15]
        break;
 80032f2:	e005      	b.n	8003300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f4:	4b37      	ldr	r3, [pc, #220]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ef      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d160      	bne.n	80033c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d111      	bne.n	8003330 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800330c:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	0211      	lsls	r1, r2, #8
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	0912      	lsrs	r2, r2, #4
 8003324:	0452      	lsls	r2, r2, #17
 8003326:	430a      	orrs	r2, r1
 8003328:	492a      	ldr	r1, [pc, #168]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800332a:	4313      	orrs	r3, r2
 800332c:	610b      	str	r3, [r1, #16]
 800332e:	e027      	b.n	8003380 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d112      	bne.n	800335c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003336:	4b27      	ldr	r3, [pc, #156]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800333e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6892      	ldr	r2, [r2, #8]
 8003346:	0211      	lsls	r1, r2, #8
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6912      	ldr	r2, [r2, #16]
 800334c:	0852      	lsrs	r2, r2, #1
 800334e:	3a01      	subs	r2, #1
 8003350:	0552      	lsls	r2, r2, #21
 8003352:	430a      	orrs	r2, r1
 8003354:	491f      	ldr	r1, [pc, #124]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	610b      	str	r3, [r1, #16]
 800335a:	e011      	b.n	8003380 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335c:	4b1d      	ldr	r3, [pc, #116]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003364:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6892      	ldr	r2, [r2, #8]
 800336c:	0211      	lsls	r1, r2, #8
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6952      	ldr	r2, [r2, #20]
 8003372:	0852      	lsrs	r2, r2, #1
 8003374:	3a01      	subs	r2, #1
 8003376:	0652      	lsls	r2, r2, #25
 8003378:	430a      	orrs	r2, r1
 800337a:	4916      	ldr	r1, [pc, #88]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003380:	4b14      	ldr	r3, [pc, #80]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003386:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800338a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fd fc6e 	bl	8000c6c <HAL_GetTick>
 8003390:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003392:	e009      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003394:	f7fd fc6a 	bl	8000c6c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d902      	bls.n	80033a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	73fb      	strb	r3, [r7, #15]
          break;
 80033a6:	e005      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a8:	4b0a      	ldr	r3, [pc, #40]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ef      	beq.n	8003394 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033ba:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000

080033d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033f2:	4b67      	ldr	r3, [pc, #412]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0203 	and.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10d      	bne.n	800341e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
       ||
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800340a:	4b61      	ldr	r3, [pc, #388]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
       ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d047      	beq.n	80034ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	e044      	b.n	80034ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d018      	beq.n	800345e <RCCEx_PLLSAI2_Config+0x86>
 800342c:	2b03      	cmp	r3, #3
 800342e:	d825      	bhi.n	800347c <RCCEx_PLLSAI2_Config+0xa4>
 8003430:	2b01      	cmp	r3, #1
 8003432:	d002      	beq.n	800343a <RCCEx_PLLSAI2_Config+0x62>
 8003434:	2b02      	cmp	r3, #2
 8003436:	d009      	beq.n	800344c <RCCEx_PLLSAI2_Config+0x74>
 8003438:	e020      	b.n	800347c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800343a:	4b55      	ldr	r3, [pc, #340]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11d      	bne.n	8003482 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344a:	e01a      	b.n	8003482 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800344c:	4b50      	ldr	r3, [pc, #320]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d116      	bne.n	8003486 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345c:	e013      	b.n	8003486 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800345e:	4b4c      	ldr	r3, [pc, #304]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800346a:	4b49      	ldr	r3, [pc, #292]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800347a:	e006      	b.n	800348a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      break;
 8003480:	e004      	b.n	800348c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003482:	bf00      	nop
 8003484:	e002      	b.n	800348c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800348a:	bf00      	nop
    }

    if(status == HAL_OK)
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003492:	4b3f      	ldr	r3, [pc, #252]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	430b      	orrs	r3, r1
 80034a8:	4939      	ldr	r1, [pc, #228]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d167      	bne.n	8003584 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034b4:	4b36      	ldr	r3, [pc, #216]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fd fbd4 	bl	8000c6c <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034c6:	e009      	b.n	80034dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034c8:	f7fd fbd0 	bl	8000c6c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d902      	bls.n	80034dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	73fb      	strb	r3, [r7, #15]
        break;
 80034da:	e005      	b.n	80034e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ef      	bne.n	80034c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d14a      	bne.n	8003584 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d111      	bne.n	8003518 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f4:	4b26      	ldr	r3, [pc, #152]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80034fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6892      	ldr	r2, [r2, #8]
 8003504:	0211      	lsls	r1, r2, #8
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68d2      	ldr	r2, [r2, #12]
 800350a:	0912      	lsrs	r2, r2, #4
 800350c:	0452      	lsls	r2, r2, #17
 800350e:	430a      	orrs	r2, r1
 8003510:	491f      	ldr	r1, [pc, #124]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	614b      	str	r3, [r1, #20]
 8003516:	e011      	b.n	800353c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003518:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003520:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6892      	ldr	r2, [r2, #8]
 8003528:	0211      	lsls	r1, r2, #8
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6912      	ldr	r2, [r2, #16]
 800352e:	0852      	lsrs	r2, r2, #1
 8003530:	3a01      	subs	r2, #1
 8003532:	0652      	lsls	r2, r2, #25
 8003534:	430a      	orrs	r2, r1
 8003536:	4916      	ldr	r1, [pc, #88]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003538:	4313      	orrs	r3, r2
 800353a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800353c:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a13      	ldr	r2, [pc, #76]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fd fb90 	bl	8000c6c <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800354e:	e009      	b.n	8003564 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003550:	f7fd fb8c 	bl	8000c6c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	73fb      	strb	r3, [r7, #15]
          break;
 8003562:	e005      	b.n	8003570 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003564:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ef      	beq.n	8003550 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	4904      	ldr	r1, [pc, #16]	@ (8003590 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003580:	4313      	orrs	r3, r2
 8003582:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e095      	b.n	80036d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d108      	bne.n	80035c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035b6:	d009      	beq.n	80035cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
 80035be:	e005      	b.n	80035cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd f8cc 	bl	8000784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003602:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800360c:	d902      	bls.n	8003614 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e002      	b.n	800361a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003618:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003622:	d007      	beq.n	8003634 <HAL_SPI_Init+0xa0>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003676:	ea42 0103 	orr.w	r1, r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	f003 0204 	and.w	r2, r3, #4
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036b0:	ea42 0103 	orr.w	r1, r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e049      	b.n	8003780 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fd f99b 	bl	8000a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 fa4b 	bl	8003bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d001      	beq.n	80037a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04f      	b.n	8003840 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a23      	ldr	r2, [pc, #140]	@ (800384c <HAL_TIM_Base_Start_IT+0xc4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01d      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ca:	d018      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <HAL_TIM_Base_Start_IT+0xc8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d013      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_TIM_Base_Start_IT+0xcc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d00e      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003858 <HAL_TIM_Base_Start_IT+0xd0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_TIM_Base_Start_IT+0xd4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d004      	beq.n	80037fe <HAL_TIM_Base_Start_IT+0x76>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	@ (8003860 <HAL_TIM_Base_Start_IT+0xd8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d115      	bne.n	800382a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	4b17      	ldr	r3, [pc, #92]	@ (8003864 <HAL_TIM_Base_Start_IT+0xdc>)
 8003806:	4013      	ands	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b06      	cmp	r3, #6
 800380e:	d015      	beq.n	800383c <HAL_TIM_Base_Start_IT+0xb4>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003816:	d011      	beq.n	800383c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	e008      	b.n	800383c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e000      	b.n	800383e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40013400 	.word	0x40013400
 8003860:	40014000 	.word	0x40014000
 8003864:	00010007 	.word	0x00010007

08003868 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e049      	b.n	800390e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f841 	bl	8003916 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f000 f984 	bl	8003bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
	...

0800392c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003946:	2302      	movs	r3, #2
 8003948:	e066      	b.n	8003a18 <HAL_TIM_OC_ConfigChannel+0xec>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b14      	cmp	r3, #20
 8003956:	d857      	bhi.n	8003a08 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003958:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <HAL_TIM_OC_ConfigChannel+0x34>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	080039b5 	.word	0x080039b5
 8003964:	08003a09 	.word	0x08003a09
 8003968:	08003a09 	.word	0x08003a09
 800396c:	08003a09 	.word	0x08003a09
 8003970:	080039c3 	.word	0x080039c3
 8003974:	08003a09 	.word	0x08003a09
 8003978:	08003a09 	.word	0x08003a09
 800397c:	08003a09 	.word	0x08003a09
 8003980:	080039d1 	.word	0x080039d1
 8003984:	08003a09 	.word	0x08003a09
 8003988:	08003a09 	.word	0x08003a09
 800398c:	08003a09 	.word	0x08003a09
 8003990:	080039df 	.word	0x080039df
 8003994:	08003a09 	.word	0x08003a09
 8003998:	08003a09 	.word	0x08003a09
 800399c:	08003a09 	.word	0x08003a09
 80039a0:	080039ed 	.word	0x080039ed
 80039a4:	08003a09 	.word	0x08003a09
 80039a8:	08003a09 	.word	0x08003a09
 80039ac:	08003a09 	.word	0x08003a09
 80039b0:	080039fb 	.word	0x080039fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f9a0 	bl	8003d00 <TIM_OC1_SetConfig>
      break;
 80039c0:	e025      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fa29 	bl	8003e20 <TIM_OC2_SetConfig>
      break;
 80039ce:	e01e      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 faac 	bl	8003f34 <TIM_OC3_SetConfig>
      break;
 80039dc:	e017      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fb2d 	bl	8004044 <TIM_OC4_SetConfig>
      break;
 80039ea:	e010      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fb90 	bl	8004118 <TIM_OC5_SetConfig>
      break;
 80039f8:	e009      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fbed 	bl	80041e0 <TIM_OC6_SetConfig>
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_TIM_ConfigClockSource+0x1c>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0b6      	b.n	8003baa <HAL_TIM_ConfigClockSource+0x18a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a78:	d03e      	beq.n	8003af8 <HAL_TIM_ConfigClockSource+0xd8>
 8003a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7e:	f200 8087 	bhi.w	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a86:	f000 8086 	beq.w	8003b96 <HAL_TIM_ConfigClockSource+0x176>
 8003a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8e:	d87f      	bhi.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003a90:	2b70      	cmp	r3, #112	@ 0x70
 8003a92:	d01a      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0xaa>
 8003a94:	2b70      	cmp	r3, #112	@ 0x70
 8003a96:	d87b      	bhi.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003a98:	2b60      	cmp	r3, #96	@ 0x60
 8003a9a:	d050      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x11e>
 8003a9c:	2b60      	cmp	r3, #96	@ 0x60
 8003a9e:	d877      	bhi.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003aa0:	2b50      	cmp	r3, #80	@ 0x50
 8003aa2:	d03c      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0xfe>
 8003aa4:	2b50      	cmp	r3, #80	@ 0x50
 8003aa6:	d873      	bhi.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003aa8:	2b40      	cmp	r3, #64	@ 0x40
 8003aaa:	d058      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x13e>
 8003aac:	2b40      	cmp	r3, #64	@ 0x40
 8003aae:	d86f      	bhi.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003ab0:	2b30      	cmp	r3, #48	@ 0x30
 8003ab2:	d064      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x15e>
 8003ab4:	2b30      	cmp	r3, #48	@ 0x30
 8003ab6:	d86b      	bhi.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d060      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x15e>
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d867      	bhi.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05c      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x15e>
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d05a      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x15e>
 8003ac8:	e062      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ada:	f000 fc61 	bl	80043a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	609a      	str	r2, [r3, #8]
      break;
 8003af6:	e04f      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b08:	f000 fc4a 	bl	80043a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b1a:	609a      	str	r2, [r3, #8]
      break;
 8003b1c:	e03c      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f000 fbbe 	bl	80042ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2150      	movs	r1, #80	@ 0x50
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fc17 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003b3c:	e02c      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f000 fbdd 	bl	800430a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2160      	movs	r1, #96	@ 0x60
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fc07 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e01c      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 fb9e 	bl	80042ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2140      	movs	r1, #64	@ 0x40
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fbf7 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e00c      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f000 fbee 	bl	800436a <TIM_ITRx_SetConfig>
      break;
 8003b8e:	e003      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      break;
 8003b94:	e000      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a46      	ldr	r2, [pc, #280]	@ (8003ce0 <TIM_Base_SetConfig+0x12c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd2:	d00f      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a43      	ldr	r2, [pc, #268]	@ (8003ce4 <TIM_Base_SetConfig+0x130>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00b      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a42      	ldr	r2, [pc, #264]	@ (8003ce8 <TIM_Base_SetConfig+0x134>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a41      	ldr	r2, [pc, #260]	@ (8003cec <TIM_Base_SetConfig+0x138>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a40      	ldr	r2, [pc, #256]	@ (8003cf0 <TIM_Base_SetConfig+0x13c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a35      	ldr	r2, [pc, #212]	@ (8003ce0 <TIM_Base_SetConfig+0x12c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d01f      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c14:	d01b      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a32      	ldr	r2, [pc, #200]	@ (8003ce4 <TIM_Base_SetConfig+0x130>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d017      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a31      	ldr	r2, [pc, #196]	@ (8003ce8 <TIM_Base_SetConfig+0x134>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a30      	ldr	r2, [pc, #192]	@ (8003cec <TIM_Base_SetConfig+0x138>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00f      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf0 <TIM_Base_SetConfig+0x13c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf4 <TIM_Base_SetConfig+0x140>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d007      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf8 <TIM_Base_SetConfig+0x144>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0x9a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2c      	ldr	r2, [pc, #176]	@ (8003cfc <TIM_Base_SetConfig+0x148>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a16      	ldr	r2, [pc, #88]	@ (8003ce0 <TIM_Base_SetConfig+0x12c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00f      	beq.n	8003cac <TIM_Base_SetConfig+0xf8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a18      	ldr	r2, [pc, #96]	@ (8003cf0 <TIM_Base_SetConfig+0x13c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00b      	beq.n	8003cac <TIM_Base_SetConfig+0xf8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a17      	ldr	r2, [pc, #92]	@ (8003cf4 <TIM_Base_SetConfig+0x140>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_Base_SetConfig+0xf8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a16      	ldr	r2, [pc, #88]	@ (8003cf8 <TIM_Base_SetConfig+0x144>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0xf8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a15      	ldr	r2, [pc, #84]	@ (8003cfc <TIM_Base_SetConfig+0x148>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d103      	bne.n	8003cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d105      	bne.n	8003cd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40013400 	.word	0x40013400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40014800 	.word	0x40014800

08003d00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f023 0201 	bic.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f023 0302 	bic.w	r3, r3, #2
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e0c <TIM_OC1_SetConfig+0x10c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00f      	beq.n	8003d80 <TIM_OC1_SetConfig+0x80>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a2b      	ldr	r2, [pc, #172]	@ (8003e10 <TIM_OC1_SetConfig+0x110>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_OC1_SetConfig+0x80>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e14 <TIM_OC1_SetConfig+0x114>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_OC1_SetConfig+0x80>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <TIM_OC1_SetConfig+0x118>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC1_SetConfig+0x80>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a28      	ldr	r2, [pc, #160]	@ (8003e1c <TIM_OC1_SetConfig+0x11c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d10c      	bne.n	8003d9a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0308 	bic.w	r3, r3, #8
 8003d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e0c <TIM_OC1_SetConfig+0x10c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00f      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xc2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e10 <TIM_OC1_SetConfig+0x110>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xc2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <TIM_OC1_SetConfig+0x114>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xc2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <TIM_OC1_SetConfig+0x118>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC1_SetConfig+0xc2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a17      	ldr	r2, [pc, #92]	@ (8003e1c <TIM_OC1_SetConfig+0x11c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d111      	bne.n	8003de6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40013400 	.word	0x40013400
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800

08003e20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f023 0210 	bic.w	r2, r3, #16
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a28      	ldr	r2, [pc, #160]	@ (8003f20 <TIM_OC2_SetConfig+0x100>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC2_SetConfig+0x6c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <TIM_OC2_SetConfig+0x104>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10d      	bne.n	8003ea8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <TIM_OC2_SetConfig+0x100>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00f      	beq.n	8003ed0 <TIM_OC2_SetConfig+0xb0>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <TIM_OC2_SetConfig+0x104>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_OC2_SetConfig+0xb0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	@ (8003f28 <TIM_OC2_SetConfig+0x108>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_OC2_SetConfig+0xb0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f2c <TIM_OC2_SetConfig+0x10c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_OC2_SetConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <TIM_OC2_SetConfig+0x110>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d113      	bne.n	8003ef8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40013400 	.word	0x40013400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800

08003f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a27      	ldr	r2, [pc, #156]	@ (8004030 <TIM_OC3_SetConfig+0xfc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_OC3_SetConfig+0x6a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a26      	ldr	r2, [pc, #152]	@ (8004034 <TIM_OC3_SetConfig+0x100>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10d      	bne.n	8003fba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004030 <TIM_OC3_SetConfig+0xfc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_OC3_SetConfig+0xae>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004034 <TIM_OC3_SetConfig+0x100>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_OC3_SetConfig+0xae>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8004038 <TIM_OC3_SetConfig+0x104>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_OC3_SetConfig+0xae>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	@ (800403c <TIM_OC3_SetConfig+0x108>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_OC3_SetConfig+0xae>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a18      	ldr	r2, [pc, #96]	@ (8004040 <TIM_OC3_SetConfig+0x10c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d113      	bne.n	800400a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	621a      	str	r2, [r3, #32]
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40013400 	.word	0x40013400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800

08004044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	031b      	lsls	r3, r3, #12
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a18      	ldr	r2, [pc, #96]	@ (8004104 <TIM_OC4_SetConfig+0xc0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00f      	beq.n	80040c8 <TIM_OC4_SetConfig+0x84>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <TIM_OC4_SetConfig+0xc4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00b      	beq.n	80040c8 <TIM_OC4_SetConfig+0x84>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a16      	ldr	r2, [pc, #88]	@ (800410c <TIM_OC4_SetConfig+0xc8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_OC4_SetConfig+0x84>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <TIM_OC4_SetConfig+0xcc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_OC4_SetConfig+0x84>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a14      	ldr	r2, [pc, #80]	@ (8004114 <TIM_OC4_SetConfig+0xd0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d109      	bne.n	80040dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40013400 	.word	0x40013400
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800

08004118 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800415c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a17      	ldr	r2, [pc, #92]	@ (80041cc <TIM_OC5_SetConfig+0xb4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00f      	beq.n	8004192 <TIM_OC5_SetConfig+0x7a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a16      	ldr	r2, [pc, #88]	@ (80041d0 <TIM_OC5_SetConfig+0xb8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_OC5_SetConfig+0x7a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a15      	ldr	r2, [pc, #84]	@ (80041d4 <TIM_OC5_SetConfig+0xbc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d007      	beq.n	8004192 <TIM_OC5_SetConfig+0x7a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a14      	ldr	r2, [pc, #80]	@ (80041d8 <TIM_OC5_SetConfig+0xc0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_OC5_SetConfig+0x7a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <TIM_OC5_SetConfig+0xc4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d109      	bne.n	80041a6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800

080041e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800420e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	051b      	lsls	r3, r3, #20
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a18      	ldr	r2, [pc, #96]	@ (8004298 <TIM_OC6_SetConfig+0xb8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00f      	beq.n	800425c <TIM_OC6_SetConfig+0x7c>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a17      	ldr	r2, [pc, #92]	@ (800429c <TIM_OC6_SetConfig+0xbc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_OC6_SetConfig+0x7c>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <TIM_OC6_SetConfig+0xc0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_OC6_SetConfig+0x7c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a15      	ldr	r2, [pc, #84]	@ (80042a4 <TIM_OC6_SetConfig+0xc4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_OC6_SetConfig+0x7c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a14      	ldr	r2, [pc, #80]	@ (80042a8 <TIM_OC6_SetConfig+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d109      	bne.n	8004270 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004262:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	029b      	lsls	r3, r3, #10
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40013400 	.word	0x40013400
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40014400 	.word	0x40014400
 80042a8:	40014800 	.word	0x40014800

080042ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 030a 	bic.w	r3, r3, #10
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430a:	b480      	push	{r7}
 800430c:	b087      	sub	sp, #28
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 0210 	bic.w	r2, r3, #16
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	031b      	lsls	r3, r3, #12
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004346:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	f043 0307 	orr.w	r3, r3, #7
 800438c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	021a      	lsls	r2, r3, #8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e068      	b.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2e      	ldr	r2, [pc, #184]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2d      	ldr	r2, [pc, #180]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004432:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004444:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1e      	ldr	r2, [pc, #120]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01d      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800446a:	d018      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1a      	ldr	r2, [pc, #104]	@ (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a18      	ldr	r2, [pc, #96]	@ (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d009      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a13      	ldr	r2, [pc, #76]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a14      	ldr	r2, [pc, #80]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40013400 	.word	0x40013400
 80044e0:	40000400 	.word	0x40000400
 80044e4:	40000800 	.word	0x40000800
 80044e8:	40000c00 	.word	0x40000c00
 80044ec:	40014000 	.word	0x40014000

080044f0 <memset>:
 80044f0:	4402      	add	r2, r0
 80044f2:	4603      	mov	r3, r0
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d100      	bne.n	80044fa <memset+0xa>
 80044f8:	4770      	bx	lr
 80044fa:	f803 1b01 	strb.w	r1, [r3], #1
 80044fe:	e7f9      	b.n	80044f4 <memset+0x4>

08004500 <__libc_init_array>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	4d0d      	ldr	r5, [pc, #52]	@ (8004538 <__libc_init_array+0x38>)
 8004504:	4c0d      	ldr	r4, [pc, #52]	@ (800453c <__libc_init_array+0x3c>)
 8004506:	1b64      	subs	r4, r4, r5
 8004508:	10a4      	asrs	r4, r4, #2
 800450a:	2600      	movs	r6, #0
 800450c:	42a6      	cmp	r6, r4
 800450e:	d109      	bne.n	8004524 <__libc_init_array+0x24>
 8004510:	4d0b      	ldr	r5, [pc, #44]	@ (8004540 <__libc_init_array+0x40>)
 8004512:	4c0c      	ldr	r4, [pc, #48]	@ (8004544 <__libc_init_array+0x44>)
 8004514:	f000 f818 	bl	8004548 <_init>
 8004518:	1b64      	subs	r4, r4, r5
 800451a:	10a4      	asrs	r4, r4, #2
 800451c:	2600      	movs	r6, #0
 800451e:	42a6      	cmp	r6, r4
 8004520:	d105      	bne.n	800452e <__libc_init_array+0x2e>
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	f855 3b04 	ldr.w	r3, [r5], #4
 8004528:	4798      	blx	r3
 800452a:	3601      	adds	r6, #1
 800452c:	e7ee      	b.n	800450c <__libc_init_array+0xc>
 800452e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004532:	4798      	blx	r3
 8004534:	3601      	adds	r6, #1
 8004536:	e7f2      	b.n	800451e <__libc_init_array+0x1e>
 8004538:	080045a0 	.word	0x080045a0
 800453c:	080045a0 	.word	0x080045a0
 8004540:	080045a0 	.word	0x080045a0
 8004544:	080045a4 	.word	0x080045a4

08004548 <_init>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr

08004554 <_fini>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	bf00      	nop
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr
